{"version":3,"sources":["webcomponents-hi-index.js","bower_components/shadycss/src/css-parse.js","bower_components/shadycss/src/style-settings.js","bower_components/shadycss/src/style-util.js","bower_components/shadycss/src/style-properties.js","bower_components/shadycss/src/custom-style-element.js","bower_components/html-imports/src/html-imports.js","bower_components/shadycss/src/style-transformer.js","bower_components/shadycss/src/template-map.js","bower_components/shadycss/src/style-info.js","bower_components/shadycss/src/style-placeholder.js","bower_components/shadycss/src/apply-shim.js","bower_components/shadycss/src/document-watcher.js","bower_components/shadycss/src/ShadyCSS.js","bower_components/shadycss/src/style-cache.js","src/post-polyfill.js","src/unresolved.js","src/ready.js"],"names":["parse","text","clean","parseCss","lex","cssText","replace","RX","comments","port","root","start","end","length","n","i","l","OPEN_BRACE","rules","p","previous","parent","push","CLOSE_BRACE","node","t","substring","parsedCssText","trim","ss","_expandUnicodeEscapes","multipleSpaces","lastIndexOf","s","parsedSelector","selector","atRule","indexOf","AT_START","MEDIA_START","type","types","MEDIA_RULE","match","keyframesRule","KEYFRAMES_RULE","keyframesName","split","pop","VAR_START","MIXIN_RULE","STYLE_RULE","r$","r","code","arguments","repeat","stringify","preserveProperties","_hasMixinRules","removeCustomProps","removeCustomPropAssignment","removeCustomPropApply","customProp","mixinProp","mixinApply","varApply","parseSettings","settings","nativeCssVariables","shimcssproperties","nativeShadow","shimshadow","toCssText","callback","forEachRule","rulesForStyle","style","__cssRules","textContent","isKeyframesSelector","rule","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","matchMedia","rx","MEDIA_MATCH","window","matches","applyCss","moniker","target","contextNode","createScopeStyle","applyStyle","document","head","after","nextSibling","firstChild","lastHeadApplyNode","insertBefore","createElement","setAttribute","applyStylePlaceHolder","placeHolder","createComment","scope","findMatchingParen","level","processVariableAndFallback","str","inner","prefix","suffix","comma","value","fallback","setElementClassRaw","element","ShadyDOM","nativeMethods","call","addToBitMask","bits","o","parseInt","enqueueDocumentValidation","enqueued","HTMLImports","whenReady","validateDocument","readyState","addEventListener","requestAnimationFrame","ShadyCSS","_elementsHaveApplied","updateStyles","currentScript","Object","defineProperty","get","scripts","configurable","ABS_URL_TEST","CSS_URL_REGEXP","CSS_IMPORT_REGEXP","STYLESHEET_REGEXP","Path","fixUrls","base","href","replaceAttrUrl","getAttribute","src","localName","resolveUrlsInStyle","fixUrlAttributes","attrs","a","at","attributes","v","search","resolveUrlsInCssText","fixUrlsInTemplates","t$","querySelectorAll","fixUrlsInTemplate","template","content","n$","linkUrl","replaceUrls","regexp","m","pre","url","post","urlPath","resolveUrl","test","__workingURL","u","URL","pathname","e","doc","__tempDoc","implementation","createHTMLDocument","__base","appendChild","__anchor","Xhr","async","load","success","fail","pieces","header","resource","atob","decodeURIComponent","request","XMLHttpRequest","open","onload","redirectedUrl","getResponseHeader","origin","location","protocol","host","response","responseText","status","send","isIE","navigator","userAgent","importSelector","importDisableType","disabledLinkSelector","importDependenciesSelector","importDependencyAttr","rootImportSelector","pendingScriptsSelector","pendingStylesSelector","Importer","constructor","documents","inflight","dynamicImportsMO","MutationObserver","handleMutations","observe","childList","subtree","loadImports","links","loadImport","processImportsIfLoadingDone","link","imp","import","fireEventIfNeeded","makeDocument","createDocumentFragment","p1","p2","innerHTML","baseEl","querySelector","removeAttribute","s$","inlineScriptIndex","whenElementLoaded","num","encodeURIComponent","disconnect","flatten","scriptsOk","stylesOk","onLoadingDone","fireEvents","waitForStyles","runScripts","nodeType","Node","DOCUMENT_FRAGMENT_NODE","cloneScript","clone","j","ll","name","parentNode","replaceChild","pending","needsMove","rootImport","importForElement","next","placeholder","eventType","dispatchEvent","newCustomEvent","bubbles","cancelable","detail","mutations","addedNodes","ii","ELEMENT_NODE","isImportLink","rel","event","removeEventListener","whenDocumentReady","whenImportsReady","stateChanged","imports","owner","params","CustomEvent","createEvent","initCustomEvent","useNative","inUse","CSS","supports","WebComponents","flags","VAR_ASSIGN","MIXIN_MATCH","VAR_CONSUMED","ANIMATION_MATCH","IS_VAR","BRACKETED","HOST_PREFIX","HOST_SUFFIX","SCOPE_NAME","StyleTransformer","dom","shouldRemoveScope","__styleScoped","_transformDom","c$","_content","childNodes","children","classList","remove","add","c","CLASS","newValue","StyleUtil.setElementClassRaw","elementStyles","styleRules","cssBuildType","__cssBuild","StyleUtil.toCssText","css","is","extends","ext","hostScope","_calcHostScope","_calcElementScope","self","isScoped","CSS_CLASS_PREFIX","_transformRule","_transformComplexSelector","transformer","transformedSelector","_transformRuleCss","p$","COMPLEX_SELECTOR_SEP","StyleUtil.isKeyframesSelector","join","stop","NTH","SLOTTED_START","HOST","SIMPLE_SELECTOR_SEP","info","_transformCompoundSelector","combinator","slottedIndex","SLOTTED","_transformHostSelector","_transformSimpleSelector","slotted","SLOTTED_PAREN","paren","DIR_PAREN","before","dir","PSEUDO_PREFIX","HOST_PAREN","SIMPLE_SELECTOR_PREFIX","typeSelector","SELECTOR_NO_MATCH","documentRule","normalizeRootSelector","_transformDocumentSelector","ROOT","SCOPE_DOC_SELECTOR","StyleTransformer$1","templateMap","promise","Promise","resolve","StyleInfo","__styleInfo","set","styleInfo","invalidate","elementName","_applyShimInvalid","startValidating","_validating","then","ast","ownStylePropertyNames","typeExtension","cssBuild","overrideStyleProperties","styleProperties","scopeSelector","customStyle","Element","prototype","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","IS_IE","XSCOPE_NAME","StyleProperties","decorateStyles","props","keyframes","ruleIndex","StyleUtil.forEachRule","decorateRule","index","collectPropertiesInCssText","propertyInfo","_keyframes","names","properties","hasProperties","collectProperties","collectCssText","StyleUtil.rx","any","exec","assign","collectConsumingCssText","reify","getOwnPropertyNames","valueForProperty","property","valueForProperties","StyleUtil.processVariableAndFallback","propertyValue","parts","lastIndex","colon","pp","slice","applyProperties","output","applyKeyframeTransforms","keyframeTransforms","input","hasAnimations","transform","keyframeNamesToTransform","keyframe","propertyDataFromStyles","selectorToMatch","key","whenHostOrRootRule","isRoot","isHost","hostAndRootPropertiesForScope","hostProps","rootProps","_element","transformStyles","hostSelector","rxHostSelector","hostRx","RegExp","_elementKeyframeTransforms","_scopeSelector","keyframesRules","_scopeKeyframes","_keyframesRuleTransformer","keyframesNameRx","transformedKeyframesName","scopeId","applyElementScopeSelector","old","applyElementStyle","_useCount","removeChild","StyleUtil.applyCss","shadowRoot","StyleUtil.applyStyle","applyCustomStyle","StyleUtil.rulesForStyle","StyleProperties$1","placeholderMap","ce","customElements","origDefine","define","clazz","options","APPLY_NAME_CLEAN","INITIAL_INHERIT","MIXIN_VAR_SEP","MixinMap","_map","dependants","ApplyShim","_currentTemplate","_measureElement","_separator","_boundProduceCssProperties","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","detectMixin","has","transformStyle","transformRules","transformRule","transformCssText","_consumeCssProperties","_getInitialValueForProperty","all","getComputedStyle","getPropertyValue","mixinName","idx","applyPos","afterApplyPos","textBeforeApply","textAfterApply","defaults","_cssTextToMap","replacement","_atApplyToCssProperties","fallbacks","vars","mixinEntry","f","_replaceInitialOrInherit","out","sp","_invalidateMixinEntry","mixinAsProperties","mixinValues","combinedProps","oldProps","create","needToInvalidate","applyShim","flush","elementNeedsScoping","contains","SVGElement","hasAttribute","handler","mxns","mxn","x","documentElement","getRootNode","removedNodes","classes","Array","from","classIdx","observer","nativeCustomElements","delayedStart","body","listener","takeRecords","styleCache","typeMax","cache","_validate","cacheEntry","ownPropertyNames","pn","store","tagname","styleElement","list","shift","fetch","entry","_scopeCounter","_documentOwner","_documentOwnerStyleInfo","nativeCss","nativeCssApply","watcherFlush","_generateScopeSelector","id","getStyleAst","styleAstToString","_gatherStyles","styles","_getCssBuild","prepareTemplate","_prepared","hasMixins","_styleAst","_generateStaticStyle","_style","_ownPropertyNames","shadowroot","_prepareHost","_cssBuild","overrideProps","hasApplied","_isRootOwner","CustomStyle","CS","_documentDirty","findStyles","_revalidateApplyShim","_updateProperties","applyStyles","_updateNativeProperties","_applyStyleProperties","_applyToDescendants","_styleOwnerForNode","cachedScopeSelector","cachedStyle","oldScopeSelector","ownerStyleInfo","ownerProperties","hostAndRootProps","propertyData","propertiesMatchingHost","_mixinOverrideStyles","overrides","removeProperty","setProperty","_transformCustomStyleForDocument","_applyCustomStyleToDocument","getComputedStyleValue","setElementClass","classString","scopeName","classAttr","k$","_styleInfoForNode","customStyles","hookFn","HTMLElement","_customStyles","processHook","fn","__appliedElement","attr","polyfillWrapFlushCallback","runAndClearCallback","flushCallback","cb","origWhenReady"],"mappings":"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","file":"webcomponents-hi.js","sourcesContent":["(function () {\n'use strict';\n\n/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n(scope => {\n  'use strict';\n\n  /********************* base setup *********************/\n\n  // Polyfill `currentScript` for browsers without it.\n  let currentScript = null;\n  if ('currentScript' in document === false) {\n    Object.defineProperty(document, 'currentScript', {\n      get() {\n        return currentScript ||\n          // NOTE: only works when called in synchronously executing code.\n          // readyState should check if `loading` but IE10 is\n          // interactive when scripts run so we cheat. This is not needed by\n          // html-imports polyfill but helps generally polyfill `currentScript`.\n          (document.readyState !== 'complete' ?\n            document.scripts[document.scripts.length - 1] : null);\n      },\n      configurable: true\n    });\n  }\n\n  /********************* path fixup *********************/\n  const ABS_URL_TEST = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n  const CSS_URL_REGEXP = /(url\\()([^)]*)(\\))/g;\n  const CSS_IMPORT_REGEXP = /(@import[\\s]+(?!url\\())([^;]*)(;)/g;\n  const STYLESHEET_REGEXP = /(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g;\n\n  // path fixup: style elements in imports must be made relative to the main\n  // document. We fixup url's in url() and @import.\n  const Path = {\n\n    fixUrls(element, base) {\n      if (element.href) {\n        element.setAttribute('href',\n          Path.replaceAttrUrl(element.getAttribute('href'), base));\n      }\n      if (element.src) {\n        element.setAttribute('src',\n          Path.replaceAttrUrl(element.getAttribute('src'), base));\n      }\n      if (element.localName === 'style') {\n        Path.resolveUrlsInStyle(element, base);\n      }\n    },\n\n    fixUrlAttributes(element, base) {\n      const attrs = ['action', 'src', 'href', 'url', 'style'];\n      for (let i = 0, a; i < attrs.length && (a = attrs[i]); i++) {\n        const at = element.attributes[a];\n        const v = at && at.value;\n        // Skip bound attribute values (assume binding is done via {} and []).\n        // TODO(valdrin) consider exposing a library-implementable hook.\n        if (v && (v.search(/({{|\\[\\[)/) < 0)) {\n          at.value = (a === 'style') ?\n            Path.resolveUrlsInCssText(v, base) :\n            Path.replaceAttrUrl(v, base);\n        }\n      }\n    },\n\n    fixUrlsInTemplates(element, base) {\n      const t$ = element.querySelectorAll('template');\n      for (let i = 0; i < t$.length; i++) {\n        Path.fixUrlsInTemplate(t$[i], base);\n      }\n    },\n\n    fixUrlsInTemplate(template, base) {\n      // If template is not supported, still resolve urls within it.\n      const content = template.content || template;\n      const n$ = content.querySelectorAll(\n        'style, form[action], [src], [href], [url], [style]');\n      for (let i = 0; i < n$.length; i++) {\n        const n = n$[i];\n        if (n.localName == 'style') {\n          Path.resolveUrlsInStyle(n, base);\n        } else {\n          Path.fixUrlAttributes(n, base);\n        }\n      }\n      Path.fixUrlsInTemplates(content, base);\n    },\n\n    resolveUrlsInStyle(style, linkUrl) {\n      style.textContent = Path.resolveUrlsInCssText(style.textContent, linkUrl);\n    },\n\n    resolveUrlsInCssText(cssText, linkUrl) {\n      let r = Path.replaceUrls(cssText, linkUrl, CSS_URL_REGEXP);\n      r = Path.replaceUrls(r, linkUrl, CSS_IMPORT_REGEXP);\n      return r;\n    },\n\n    replaceUrls(text, linkUrl, regexp) {\n      return text.replace(regexp, (m, pre, url, post) => {\n        let urlPath = url.replace(/[\"']/g, '');\n        if (linkUrl) {\n          urlPath = Path.resolveUrl(urlPath, linkUrl);\n        }\n        return pre + '\\'' + urlPath + '\\'' + post;\n      });\n    },\n\n    replaceAttrUrl(text, linkUrl) {\n      if (text && ABS_URL_TEST.test(text)) {\n        return text;\n      } else {\n        return Path.resolveUrl(text, linkUrl);\n      }\n    },\n\n    resolveUrl(url, base) {\n      // Lazy feature detection.\n      if (Path.__workingURL === undefined) {\n        Path.__workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          Path.__workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {}\n      }\n\n      if (Path.__workingURL) {\n        return (new URL(url, base)).href;\n      }\n\n      // Fallback to creating an anchor into a disconnected document.\n      let doc = Path.__tempDoc;\n      if (!doc) {\n        doc = document.implementation.createHTMLDocument('temp');\n        Path.__tempDoc = doc;\n        doc.__base = doc.createElement('base');\n        doc.head.appendChild(doc.__base);\n        doc.__anchor = doc.createElement('a');\n      }\n      doc.__base.href = base;\n      doc.__anchor.href = url;\n      return doc.__anchor.href || url;\n    }\n  };\n\n  /********************* Xhr processor *********************/\n  const Xhr = {\n\n    async: true,\n\n    /**\n     * @param {!string} url\n     * @param {!function(!string, string=)} success\n     * @param {!function(!string)} fail\n     */\n    load(url, success, fail) {\n      if (!url) {\n        fail('error: href must be specified');\n      } else if (url.match(/^data:/)) {\n        // Handle Data URI Scheme\n        const pieces = url.split(',');\n        const header = pieces[0];\n        let resource = pieces[1];\n        if (header.indexOf(';base64') > -1) {\n          resource = atob(resource);\n        } else {\n          resource = decodeURIComponent(resource);\n        }\n        success(resource);\n      } else {\n        const request = new XMLHttpRequest();\n        request.open('GET', url, Xhr.async);\n        request.onload = () => {\n          // Servers redirecting an import can add a Location header to help us\n          // polyfill correctly. Handle relative and full paths.\n          let redirectedUrl = request.getResponseHeader('Location');\n          if (redirectedUrl && redirectedUrl.indexOf('/') === 0) {\n            // In IE location.origin might not work\n            // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7\n            const origin = (location.origin || location.protocol + '//' + location.host);\n            redirectedUrl = origin + redirectedUrl;\n          }\n          const resource = /** @type {string} */ (request.response || request.responseText);\n          if (request.status === 304 || request.status === 0 ||\n            request.status >= 200 && request.status < 300) {\n            success(resource, redirectedUrl);\n          } else {\n            fail(resource);\n          }\n        };\n        request.send();\n      }\n    }\n  };\n\n  /********************* importer *********************/\n\n  const isIE = /Trident/.test(navigator.userAgent) ||\n    /Edge\\/\\d./i.test(navigator.userAgent);\n\n  const importSelector = 'link[rel=import]';\n\n  // Used to disable loading of resources.\n  const importDisableType = 'import-disable';\n\n  const disabledLinkSelector = `link[rel=stylesheet][href][type=${importDisableType}]`;\n\n  const importDependenciesSelector = `${importSelector}, ${disabledLinkSelector},\n    style:not([type]), link[rel=stylesheet][href]:not([type]),\n    script:not([type]), script[type=\"application/javascript\"],\n    script[type=\"text/javascript\"]`;\n\n  const importDependencyAttr = 'import-dependency';\n\n  const rootImportSelector = `${importSelector}:not(${importDependencyAttr})`;\n\n  const pendingScriptsSelector = `script[${importDependencyAttr}]`;\n\n  const pendingStylesSelector = `style[${importDependencyAttr}],\n    link[rel=stylesheet][${importDependencyAttr}]`;\n\n  /**\n   * Importer will:\n   * - load any linked import documents (with deduping)\n   * - whenever an import is loaded, prompt the parser to try to parse\n   * - observe imported documents for new elements (these are handled via the\n   *   dynamic importer)\n   */\n  class Importer {\n    constructor() {\n      this.documents = {};\n      // Used to keep track of pending loads, so that flattening and firing of\n      // events can be done when all resources are ready.\n      this.inflight = 0;\n      // Used to observe changes on <head>, keep track so we can stop observer\n      // while flattening.\n      this.dynamicImportsMO = new MutationObserver(m => this.handleMutations(m));\n      this.dynamicImportsMO.observe(document.head, {\n        childList: true,\n        subtree: true\n      });\n      // 1. Load imports contents\n      // 2. Assign them to first import links on the document\n      // 3. Wait for import styles & scripts to be done loading/running\n      // 4. Fire load/error events\n      this.loadImports(document);\n    }\n\n    /**\n     * @param {!(HTMLDocument|DocumentFragment|Element)} doc\n     */\n    loadImports(doc) {\n      const links = /** @type {!NodeList<!HTMLLinkElement>} */\n        (doc.querySelectorAll(importSelector));\n      for (let i = 0, l = links.length; i < l; i++) {\n        this.loadImport(links[i]);\n      }\n      this.processImportsIfLoadingDone();\n    }\n\n    /**\n     * @param {!HTMLLinkElement} link\n     */\n    loadImport(link) {\n      const url = link.href;\n      // This resource is already being handled by another import.\n      if (this.documents[url] !== undefined) {\n        // If import is already loaded, we can safely associate it to the link\n        // and fire the load/error event.\n        const imp = this.documents[url];\n        if (imp && imp['__loaded']) {\n          link.import = imp;\n          this.fireEventIfNeeded(link);\n        }\n        return;\n      }\n      this.inflight++;\n      // Mark it as pending to notify others this url is being loaded.\n      this.documents[url] = 'pending';\n      Xhr.load(url, (resource, redirectedUrl) => {\n        const doc = this.makeDocument(resource, redirectedUrl || url);\n        this.documents[url] = doc;\n        this.inflight--;\n        // Load subtree.\n        this.loadImports(doc);\n      }, () => {\n        // If load fails, handle error.\n        this.documents[url] = null;\n        this.inflight--;\n        this.processImportsIfLoadingDone();\n      });\n    }\n\n    /**\n     * Creates a new document containing resource and normalizes urls accordingly.\n     * @param {string=} resource\n     * @param {string=} url\n     * @return {!DocumentFragment}\n     */\n    makeDocument(resource, url) {\n      if (!resource) {\n        return document.createDocumentFragment();\n      }\n\n      if (isIE) {\n        // <link rel=stylesheet> should be appended to <head>. Not doing so\n        // in IE/Edge breaks the cascading order. We disable the loading by\n        // setting the type before setting innerHTML to avoid loading\n        // resources twice.\n        resource = resource.replace(STYLESHEET_REGEXP, (match, p1, p2) => {\n          if (match.indexOf('type=') === -1) {\n            return `${p1} type=${importDisableType} ${p2}`;\n          }\n          return match;\n        });\n      }\n\n      let content;\n      const template = /** @type {!HTMLTemplateElement} */\n        (document.createElement('template'));\n      template.innerHTML = resource;\n      if (template.content) {\n        // This creates issues in Safari10 when used with shadydom (see #12).\n        content = template.content;\n      } else {\n        // <template> not supported, create fragment and move content into it.\n        content = document.createDocumentFragment();\n        while (template.firstChild) {\n          content.appendChild(template.firstChild);\n        }\n      }\n\n      // Support <base> in imported docs. Resolve url and remove its href.\n      const baseEl = content.querySelector('base');\n      if (baseEl) {\n        url = Path.replaceAttrUrl(baseEl.getAttribute('href'), url);\n        baseEl.removeAttribute('href');\n      }\n\n      // This is specific to users of <dom-module> (Polymer).\n      // TODO(valdrin) remove this when Polymer uses importForElement.\n      const s$ = content.querySelectorAll('dom-module');\n      for (let i = 0, s; i < s$.length && (s = s$[i]); i++) {\n        s.setAttribute('assetpath',\n          Path.replaceAttrUrl(s.getAttribute('assetpath') || '', url));\n      }\n\n      const n$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)>} */\n        (content.querySelectorAll(importDependenciesSelector));\n      // For source map hints.\n      let inlineScriptIndex = 0;\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\n        // Listen for load/error events, then fix urls.\n        whenElementLoaded(n);\n        Path.fixUrls(n, url);\n        // Mark for easier selectors.\n        n.setAttribute(importDependencyAttr, '');\n        // Generate source map hints for inline scripts.\n        if (n.localName === 'script' && !n.src && n.textContent) {\n          const num = inlineScriptIndex ? `-${inlineScriptIndex}` : '';\n          const content = n.textContent + `\\n//# sourceURL=${url}${num}.js\\n`;\n          // We use the src attribute so it triggers load/error events, and it's\n          // easier to capture errors (e.g. parsing) like this.\n          n.setAttribute('src', 'data:text/javascript;charset=utf-8,' + encodeURIComponent(content));\n          n.textContent = '';\n          inlineScriptIndex++;\n        }\n      }\n      Path.fixUrlsInTemplates(content, url);\n      return content;\n    }\n\n    /**\n     * Waits for loaded imports to finish loading scripts and styles, then fires\n     * the load/error events.\n     */\n    processImportsIfLoadingDone() {\n      // Wait until all resources are ready, then load import resources.\n      if (this.inflight) {\n        return;\n      }\n\n      // Stop observing, flatten & load resource, then restart observing <head>.\n      this.dynamicImportsMO.disconnect();\n      this.flatten(document);\n      // We wait for styles to load, and at the same time we execute the scripts,\n      // then fire the load/error events for imports to have faster whenReady\n      // callback execution.\n      // NOTE: This is different for native behavior where scripts would be\n      // executed after the styles before them are loaded.\n      // To achieve that, we could select pending styles and scripts in the\n      // document and execute them sequentially in their dom order.\n      let scriptsOk = false,\n        stylesOk = false;\n      const onLoadingDone = () => {\n        if (stylesOk && scriptsOk) {\n          // Restart observing.\n          this.dynamicImportsMO.observe(document.head, {\n            childList: true,\n            subtree: true\n          });\n          this.fireEvents();\n        }\n      };\n      this.waitForStyles(() => {\n        stylesOk = true;\n        onLoadingDone();\n      });\n      this.runScripts(() => {\n        scriptsOk = true;\n        onLoadingDone();\n      });\n    }\n\n    /**\n     * @param {!HTMLDocument} doc\n     */\n    flatten(doc) {\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\n        (doc.querySelectorAll(importSelector));\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\n        const imp = this.documents[n.href];\n        n.import = /** @type {!Document} */ (imp);\n        if (imp && imp.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          // We set the .import to be the link itself, and update its readyState.\n          // Other links with the same href will point to this link.\n          this.documents[n.href] = n;\n          n.readyState = 'loading';\n          // Suppress Closure warning about incompatible subtype assignment.\n          ( /** @type {!HTMLElement} */ (n).import = n);\n          this.flatten(imp);\n          n.appendChild(imp);\n        }\n      }\n    }\n\n    /**\n     * Replaces all the imported scripts with a clone in order to execute them.\n     * Updates the `currentScript`.\n     * @param {!function()} callback\n     */\n    runScripts(callback) {\n      const s$ = document.querySelectorAll(pendingScriptsSelector);\n      const l = s$.length;\n      const cloneScript = i => {\n        if (i < l) {\n          // The pending scripts have been generated through innerHTML and\n          // browsers won't execute them for security reasons. We cannot use\n          // s.cloneNode(true) either, the only way to run the script is manually\n          // creating a new element and copying its attributes.\n          const s = s$[i];\n          const clone = /** @type {!HTMLScriptElement} */\n            (document.createElement('script'));\n          // Remove import-dependency attribute to avoid double cloning.\n          s.removeAttribute(importDependencyAttr);\n          for (let j = 0, ll = s.attributes.length; j < ll; j++) {\n            clone.setAttribute(s.attributes[j].name, s.attributes[j].value);\n          }\n          // Update currentScript and replace original with clone script.\n          currentScript = clone;\n          s.parentNode.replaceChild(clone, s);\n          whenElementLoaded(clone, () => {\n            currentScript = null;\n            cloneScript(i + 1);\n          });\n        } else {\n          callback();\n        }\n      };\n      cloneScript(0);\n    }\n\n    /**\n     * Waits for all the imported stylesheets/styles to be loaded.\n     * @param {!function()} callback\n     */\n    waitForStyles(callback) {\n      const s$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLStyleElement)>} */\n        (document.querySelectorAll(pendingStylesSelector));\n      let pending = s$.length;\n      if (!pending) {\n        callback();\n        return;\n      }\n      // <link rel=stylesheet> should be appended to <head>. Not doing so\n      // in IE/Edge breaks the cascading order\n      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10472273/\n      // If there is one <link rel=stylesheet> imported, we must move all imported\n      // links and styles to <head>.\n      const needsMove = isIE && !!document.querySelector(disabledLinkSelector);\n      for (let i = 0, l = s$.length, s; i < l && (s = s$[i]); i++) {\n        // Listen for load/error events, remove selector once is done loading.\n        whenElementLoaded(s, () => {\n          s.removeAttribute(importDependencyAttr);\n          if (--pending === 0) {\n            callback();\n          }\n        });\n        // Check if was already moved to head, to handle the case where the element\n        // has already been moved but it is still loading.\n        if (needsMove && s.parentNode !== document.head) {\n          let rootImport = importForElement(s);\n          while (rootImport && importForElement(rootImport)) {\n            rootImport = importForElement(rootImport);\n          }\n          // Replace the element we're about to move with a placeholder.\n          // NOTE: we first have to append the element to the new parent, then\n          // we can put the placeholder at its place, otherwise load/error events\n          // seem to be fired too early.\n          const parent = s.parentNode,\n            next = s.nextSibling,\n            placeholder = document.createElement(s.localName);\n          // Add reference of the moved element.\n          placeholder['__appliedElement'] = s;\n          // Disable this from appearing in document.styleSheets.\n          placeholder.setAttribute('type', 'import-placeholder');\n          // First, re-parent the element...\n          if (rootImport.parentNode === document.head) {\n            document.head.insertBefore(s, rootImport);\n          } else {\n            document.head.appendChild(s);\n          }\n          // ...and then, insert the placeholder at the right place.\n          parent.insertBefore(placeholder, next);\n          // Enable the loading of <link rel=stylesheet>.\n          s.removeAttribute('type');\n        }\n      }\n    }\n\n    /**\n     * Fires load/error events for imports in the right order .\n     */\n    fireEvents() {\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\n        (document.querySelectorAll(importSelector));\n      // Inverse order to have events firing bottom-up.\n      for (let i = n$.length - 1, n; i >= 0 && (n = n$[i]); i--) {\n        this.fireEventIfNeeded(n);\n      }\n    }\n\n    /**\n     * Fires load/error event for the import if this wasn't done already.\n     * @param {!HTMLLinkElement} link\n     */\n    fireEventIfNeeded(link) {\n      // Don't fire twice same event.\n      if (!link['__loaded']) {\n        link['__loaded'] = true;\n        // Update link's import readyState.\n        link.import && (link.import.readyState = 'complete');\n        const eventType = link.import ? 'load' : 'error';\n        link.dispatchEvent(newCustomEvent(eventType, {\n          bubbles: false,\n          cancelable: false,\n          detail: undefined\n        }));\n      }\n    }\n\n    /**\n     * @param {Array<MutationRecord>} mutations\n     */\n    handleMutations(mutations) {\n      for (let i = 0; i < mutations.length; i++) {\n        const m = mutations[i];\n        if (!m.addedNodes) {\n          continue;\n        }\n        for (let ii = 0; ii < m.addedNodes.length; ii++) {\n          const link = m.addedNodes[ii];\n          if (!link || link.nodeType !== Node.ELEMENT_NODE) {\n            continue;\n          }\n          // NOTE: added scripts are not updating currentScript in IE.\n          // TODO add test w/ script & stylesheet maybe\n          if (isImportLink(link)) {\n            this.loadImport( /** @type {!HTMLLinkElement} */ (link));\n          } else {\n            this.loadImports( /** @type {!Element} */ (link));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  const isImportLink = node => {\n    return node.nodeType === Node.ELEMENT_NODE && node.localName === 'link' &&\n      ( /** @type {!HTMLLinkElement} */ (node).rel === 'import');\n  };\n\n  /**\n   * Waits for an element to finish loading. If already done loading, it will\n   * mark the element accordingly.\n   * @param {!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)} element\n   * @param {function()=} callback\n   */\n  const whenElementLoaded = (element, callback) => {\n    if (element['__loaded']) {\n      callback && callback();\n    } else if (element.localName === 'script' && !element.src) {\n      // Inline scripts don't trigger load/error events, consider them already loaded.\n      element['__loaded'] = true;\n      callback && callback();\n    } else {\n      const onLoadingDone = event => {\n        element.removeEventListener(event.type, onLoadingDone);\n        element['__loaded'] = true;\n        callback && callback();\n      };\n      element.addEventListener('load', onLoadingDone);\n      // NOTE: We listen only for load events in IE/Edge, because in IE/Edge\n      // <style> with @import will fire error events for each failing @import,\n      // and finally will trigger the load event when all @import are\n      // finished (even if all fail).\n      if (!isIE || element.localName !== 'style') {\n        element.addEventListener('error', onLoadingDone);\n      }\n    }\n  };\n\n  /**\n   * Calls the callback when all imports in the document at call time\n   * (or at least document ready) have loaded. Callback is called synchronously\n   * if imports are already done loading.\n   * @param {!function()} callback\n   */\n  const whenReady = callback => {\n    // 1. ensure the document is in a ready state (has dom), then\n    // 2. watch for loading of imports and call callback when done\n    whenDocumentReady(() => whenImportsReady(callback));\n  };\n\n  /**\n   * Invokes the callback when document is in ready state. Callback is called\n   *  synchronously if document is already done loading.\n   * @param {!function()} callback\n   */\n  const whenDocumentReady = callback => {\n    if (document.readyState !== 'loading') {\n      callback();\n    } else {\n      const stateChanged = () => {\n        if (document.readyState !== 'loading') {\n          document.removeEventListener('readystatechange', stateChanged);\n          callback();\n        }\n      };\n      document.addEventListener('readystatechange', stateChanged);\n    }\n  };\n\n  /**\n   * Invokes the callback after all imports are loaded. Callback is called\n   * synchronously if imports are already done loading.\n   * @param {!function()} callback\n   */\n  const whenImportsReady = callback => {\n    let imports = /** @type {!NodeList<!HTMLLinkElement>} */\n      (document.querySelectorAll(rootImportSelector));\n    let pending = imports.length;\n    if (!pending) {\n      callback();\n      return;\n    }\n    for (let i = 0, l = imports.length, imp; i < l && (imp = imports[i]); i++) {\n      whenElementLoaded(imp, () => {\n        if (--pending === 0) {\n          callback();\n        }\n      });\n    }\n  };\n\n  /**\n   * Returns the link that imported the element.\n   * @param {!Node} element\n   * @return {HTMLLinkElement|Document|undefined}\n   */\n  const importForElement = element => {\n    let owner = element['__ownerImport'];\n    if (!owner) {\n      owner = element;\n      // Walk up the parent tree until we find an import.\n      while ((owner = owner.parentNode || owner.host) && !isImportLink(owner)) {}\n      element['__ownerImport'] = owner;\n    }\n    return owner;\n  };\n\n  const newCustomEvent = (type, params) => {\n    if (typeof window.CustomEvent === 'function') {\n      return new CustomEvent(type, params);\n    }\n    const event = /** @type {!CustomEvent} */ (document.createEvent('CustomEvent'));\n    event.initCustomEvent(type, Boolean(params.bubbles), Boolean(params.cancelable), params.detail);\n    return event;\n  };\n\n  // Initialize Importer only after document is ready.\n  whenDocumentReady(() => new Importer());\n\n  /**\n    Add support for the `HTMLImportsLoaded` event and the `HTMLImports.whenReady`\n    method. This api is necessary because unlike the native implementation,\n    script elements do not force imports to resolve. Instead, users should wrap\n    code in either an `HTMLImportsLoaded` handler or after load time in an\n    `HTMLImports.whenReady(callback)` call.\n   */\n  whenReady(() => document.dispatchEvent(newCustomEvent('HTMLImportsLoaded', {\n    cancelable: true,\n    bubbles: true,\n    detail: undefined\n  })));\n\n  // exports\n  scope.useNative = false;\n  scope.whenReady = whenReady;\n  scope.importForElement = importForElement;\n\n})(window.HTMLImports = (window.HTMLImports || {}));\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n// given a string of css, return a simple rule tree\nfunction parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\nfunction lex(text) {\n  let root = {\n    start: 0,\n    end: text.length\n  };\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n.rules) {\n        n.rules = [];\n      }\n      let p = n;\n      let previous = p.rules[p.rules.length - 1];\n      n = {\n        start: i + 1,\n        parent: p,\n        previous: previous\n      };\n      p.rules.push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n.end = i + 1;\n      n = n.parent || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\nfunction parseCss(node, text) {\n  let t = text.substring(node.start, node.end - 1);\n  node.parsedCssText = node.cssText = t.trim();\n  if (node.parent) {\n    let ss = node.previous ? node.previous.end : node.parent.start;\n    t = text.substring(ss, node.start - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node.parsedSelector = node.selector = t.trim();\n    node.atRule = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node.atRule) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node.type = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node.type = types.KEYFRAMES_RULE;\n        node.keyframesName =\n          node.selector.split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node.type = types.MIXIN_RULE;\n      } else {\n        node.type = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node.rules;\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n// conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n// expanded form that doesn't require trailing space `\\000033`\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n// stringify parsed css.\nfunction stringify(node, preserveProperties, text) {\n  text = text || '';\n  // calc rule cssText\n  let cssText = '';\n  if (node.cssText || node.rules) {\n    let r$ = node.rules;\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node.cssText :\n        removeCustomProps(node.cssText);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node.selector) {\n      text += node.selector + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node.selector) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\nfunction _hasMixinRules(rules) {\n  return rules[0].selector.indexOf(VAR_START) === 0;\n}\n\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\nfunction removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\nlet types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n};\n\nlet OPEN_BRACE = '{';\nlet CLOSE_BRACE = '}';\n\n// helper regexp's\nlet RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n};\n\nlet VAR_START = '--';\nlet MEDIA_START = '@media';\nlet AT_START = '@';\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet nativeShadow = !(window.ShadyDOM && window.ShadyDOM.inUse);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nlet nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n// experimental support for native @apply\nfunction detectNativeApply() {\n  let style = document.createElement('style');\n  style.textContent = '.foo { @apply --foo }';\n  document.head.appendChild(style);\n  let nativeCssApply = (style.sheet.cssRules[0].cssText.indexOf('apply') >= 0);\n  document.head.removeChild(style);\n  return nativeCssApply;\n}\n\nlet nativeCssApply = false && detectNativeApply();\n\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings.shimcssproperties;\n    nativeShadow = nativeShadow && !settings.shimshadow;\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window.ShadyCSS);\n} else if (window.WebComponents) {\n  parseSettings(window.WebComponents.flags);\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nfunction toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\nfunction rulesForStyle(style) {\n  if (!style.__cssRules && style.textContent) {\n    style.__cssRules = parse(style.textContent);\n  }\n  return style.__cssRules;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\nfunction isKeyframesSelector(rule) {\n  return rule.parent &&\n  rule.parent.type === types.KEYFRAMES_RULE;\n}\n\nfunction forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  if (onlyActiveRules) {\n    if (node.type === types.MEDIA_RULE) {\n      let matchMedia = node.selector.match(rx.MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (node.type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    node.type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (node.type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node.rules;\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\nfunction applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\nfunction applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return target.insertBefore(style, after);\n}\n\nfunction createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\nfunction applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode.nextSibling : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n\n\n// cssBuildTypeForModule: function (module) {\n//   let dm = Polymer.DomModule.import(module);\n//   if (dm) {\n//     return getCssBuildType(dm);\n//   }\n// },\n//\n\n\n// Walk from text[start] matching parens\n// returns position of the outer end paren\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\nfunction setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window.ShadyDOM) {\n    window.ShadyDOM.nativeMethods.setAttribute.call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\nlet rx = {\n  VAR_ASSIGN: /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi,\n  MIXIN_MATCH: /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,\n  VAR_CONSUMED: /(--[\\w-]+)\\s*([:,;)]|$)/gi,\n  ANIMATION_MATCH: /(animation\\s*:)|(animation-name\\s*:)/,\n  MEDIA_MATCH: /@media[^(]*(\\([^)]*\\))/,\n  IS_VAR: /^--/,\n  BRACKETED: /\\{[^}]*\\}/g,\n  HOST_PREFIX: '(?:^|[^.#[:])',\n  HOST_SUFFIX: '($|[.:[\\\\s>+~])'\n};\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  // Given a node and scope name, add a scoping class to each node\n  // in the tree. This facilitates transforming css into scoped rules.\n  dom(node, scope, shouldRemoveScope) {\n    // one time optimization to skip scoping...\n    if (node.__styleScoped) {\n      node.__styleScoped = null;\n    } else {\n      this._transformDom(node, scope || '', shouldRemoveScope);\n    }\n  }\n\n  _transformDom(node, selector, shouldRemoveScope) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      this.element(node, selector, shouldRemoveScope);\n    }\n    let c$ = (node.localName === 'template') ?\n      (node.content || node._content).childNodes :\n      node.children || node.childNodes;\n    if (c$) {\n      for (let i=0; i<c$.length; i++) {\n        this._transformDom(c$[i], selector, shouldRemoveScope);\n      }\n    }\n  }\n\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  elementStyles(element, styleRules, callback) {\n    let cssBuildType = element.__cssBuild;\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    let cssText = (nativeShadow || cssBuildType === 'shady') ?\n    toCssText(styleRules, callback) :\n    this.css(styleRules, element.is, element.extends, callback) + '\\n\\n';\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return toCssText(rules, function(rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? '[is=' +  scope + ']' : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  // transforms a css rule to a scoped rule.\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule.selector = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = rule.selector.split(COMPLEX_SELECTOR_SEP);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.join(COMPLEX_SELECTOR_SEP);\n  }\n\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`);\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    let p$ = selector.split(PSEUDO_PREFIX);\n    p$[0] += scope;\n    return p$.join(PSEUDO_PREFIX);\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule.selector = rule.parsedSelector;\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  normalizeRootSelector(rule) {\n    if (rule.selector === ROOT) {\n      rule.selector = 'html';\n    }\n  }\n\n  _transformDocumentSelector(selector) {\n    return selector.match(SLOTTED) ?\n      this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n      this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n  }\n}\n\nlet NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nlet SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nlet COMPLEX_SELECTOR_SEP = ',';\nlet SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\nlet SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nlet HOST = ':host';\nlet ROOT = ':root';\nlet SLOTTED = '::slotted';\nlet SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nlet HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nlet SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nlet DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nlet CSS_CLASS_PREFIX = '.';\nlet PSEUDO_PREFIX = ':';\nlet CLASS = 'class';\nlet SELECTOR_NO_MATCH = 'should_not_match';\n\nvar StyleTransformer$1 = new StyleTransformer();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nvar templateMap = {};\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nconst promise = Promise.resolve();\n\nclass StyleInfo {\n  static get(node) {\n    return node.__styleInfo;\n  }\n  static set(node, styleInfo) {\n    node.__styleInfo = styleInfo;\n    return styleInfo;\n  }\n  static invalidate(elementName) {\n    if (templateMap[elementName]) {\n      templateMap[elementName]._applyShimInvalid = true;\n    }\n  }\n  /*\n  the template is marked as `validating` for one microtask so that all instances\n  found in the tree crawl of `applyStyle` will update themselves,\n  but the template will only be updated once.\n  */\n  static startValidating(elementName) {\n    const template = templateMap[elementName];\n    if (!template._validating) {\n      template._validating = true;\n      promise.then(() => {\n        template._applyShimInvalid = false;\n        template._validating = false;\n      });\n    }\n  }\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    this.styleRules = ast || null;\n    this.placeholder = placeholder || null;\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    this.overrideStyleProperties = null;\n    this.elementName = elementName || '';\n    this.cssBuild = cssBuild || '';\n    this.typeExtension = typeExtension || '';\n    this.styleProperties = null;\n    this.scopeSelector = null;\n    this.customStyle = null;\n  }\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// TODO: dedupe with shady\nconst p = window.Element.prototype;\nconst matchesSelector = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n  // decorates styles with rule info and returns an array of used style\n  // property names\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule.rules = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx$$1 = rx.VAR_ASSIGN;\n      let cssText = rule.parsedCssText;\n      let value;\n      let any;\n      while ((m = rx$$1.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule.parsedCssText);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(rx.BRACKETED, '')\n      .replace(rx.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = rx.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        rx.MIXIN_MATCH.lastIndex = 0;\n        m = rx.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule.cssText = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule.cssText;\n    let output = rule.cssText;\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = rx.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule.cssText = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  propertyDataFromStyles(rules, element) {\n    let props = {}, self = this;\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    forEachRule(rules, function(rule) {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        self.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          self.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let hostScope = scope.is ?\n    StyleTransformer$1._calcHostScope(scope.is, scope.extends) :\n    'html';\n    let parsedSelector = rule.parsedSelector;\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (cssBuild === 'shadow') {\n      isRoot = parsedSelector === ':host > *' || parsedSelector === 'html';\n      isHost = isHost && !isRoot;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n      if (nativeShadow && !rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer$1._transformRuleCss(\n          rule,\n          StyleTransformer$1._transformComplexSelector,\n          StyleTransformer$1._calcElementScope(scope.is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n\n  hostAndRootPropertiesForScope(scope, rules) {\n    let hostProps = {}, rootProps = {}, self = this;\n    // note: active rules excludes non-matching @media rules\n    let cssBuild = rules && rules.__cssBuild;\n    forEachRule(rules, function(rule) {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      self.whenHostOrRootRule(scope, rule, cssBuild, function(info) {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            self.collectProperties(rule, hostProps);\n          } else {\n            self.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let hostSelector = StyleTransformer$1\n      ._calcHostScope(element.is, element.extends);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(rx.HOST_PREFIX + rxHostSelector +\n      rx.HOST_SUFFIX);\n    let rules = StyleInfo.get(element).styleRules;\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer$1.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !isKeyframesSelector(rule) &&\n          rule.cssText) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    });\n  }\n\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule.keyframesName] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n  // Transforms `@keyframes` names to be unique for the current host.\n  // Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n  _scopeKeyframes(rule, scopeId) {\n    rule.keyframesNameRx = new RegExp(rule.keyframesName, 'g');\n    rule.transformedKeyframesName = rule.keyframesName + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    rule.selector = rule.transformedSelector.replace(\n        rule.keyframesName, rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = selector.split(',');\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule.selector = parts.join(',');\n  }\n\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      setElementClassRaw(element, v);\n    }\n  }\n\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s._useCount--;\n      if (s._useCount <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        applyStyle(style, null, styleInfo.placeholder);\n      }\n\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style._useCount = style._useCount || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style._useCount++;\n      }\n      styleInfo.customStyle = style;\n    }\n    // @media rules may be stale in IE 10 and 11\n    if (IS_IE) {\n      style.textContent = style.textContent;\n    }\n    return style;\n  }\n\n  applyCustomStyle(style, properties) {\n    let rules = rulesForStyle(style);\n    let self = this;\n    style.textContent = toCssText(rules, function(rule) {\n      let css = rule.cssText = rule.parsedCssText;\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(css);\n        // replace with reified properties, scenario is same as mixin\n        rule.cssText = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nvar StyleProperties$1 = new StyleProperties();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet placeholderMap = {};\n\nconst ce = window.customElements;\nif (ce && !nativeShadow) {\n  const origDefine = ce.define;\n  ce.define = function(name, clazz, options) {\n    placeholderMap[name] = applyStylePlaceHolder(name);\n    return origDefine.call(ce, name, clazz, options);\n  };\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nclass StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    @apply --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\nlet MIXIN_MATCH = rx.MIXIN_MATCH;\nlet VAR_ASSIGN = rx.VAR_ASSIGN;\n\nlet APPLY_NAME_CLEAN = /;\\s*/m;\nlet INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nlet MIXIN_VAR_SEP = '_-_';\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    this._map = {};\n  }\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    };\n  }\n  get(name) {\n    name = name.trim();\n    return this._map[name];\n  }\n}\n\nclass ApplyShim {\n  constructor() {\n    this._currentTemplate = null;\n    this._measureElement = null;\n    this._map = new MixinMap();\n    this._separator = MIXIN_VAR_SEP;\n    this._boundProduceCssProperties = (\n      matchText, propertyName, valueProperty, valueMixin) =>\n        this._produceCssProperties(\n          matchText, propertyName, valueProperty, valueMixin);\n  }\n  // return true if `cssText` contains a mixin definition or consumption\n  detectMixin(cssText) {\n    const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n    // reset state of the regexes\n    MIXIN_MATCH.lastIndex = 0;\n    VAR_ASSIGN.lastIndex = 0;\n    return has;\n  }\n  transformStyle(style, elementName) {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    return ast;\n  }\n  transformRules(rules, elementName) {\n    this._currentTemplate = templateMap[elementName];\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentTemplate = null;\n  }\n  transformRule(rule) {\n    rule.cssText = this.transformCssText(rule.parsedCssText);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule.selector === ':root') {\n      rule.selector = ':host > *';\n    }\n  }\n  transformCssText(cssText) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, this._boundProduceCssProperties);\n    // consume mixins\n    return this._consumeCssProperties(cssText);\n  }\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = document.createElement('meta');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  // replace mixin consumption with variable consumption\n  _consumeCssProperties(text) {\n    let m;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = this._cssTextToMap(textBeforeApply);\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = [textBeforeApply, replacement, textAfterApply].join('');\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  // produce variable consumption at the site of mixin consumption\n  // @apply --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n  // Example:\n  // border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentTemplate) {\n        mixinEntry.dependants[this._currentTemplate.name] = this._currentTemplate;\n      }\n      let p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = ApplyShim._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  // \"parse\" a mixin definition into a map of properties and values\n  // cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n  _cssTextToMap(text) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  _invalidateMixinEntry(mixinEntry) {\n    for (let elementName in mixinEntry.dependants) {\n      if (!this._currentTemplate || elementName !== this._currentTemplate.name) {\n        StyleInfo.invalidate(elementName);\n      }\n    }\n  }\n\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = '@apply ' + value + ';';\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(propertyName + MIXIN_VAR_SEP + p + ': ' + v);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = matchText + ';' + prefix;\n    }\n    return prefix + out.join('; ') + ';';\n  }\n}\n\nlet applyShim = new ApplyShim();\nwindow['ApplyShim'] = applyShim;\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nlet flush = function() {};\n\nif (!nativeShadow) {\n  let elementNeedsScoping = (element) => {\n    return (element.classList &&\n      !element.classList.contains(StyleTransformer$1.SCOPE_NAME) ||\n      // note: necessary for IE11\n      (element instanceof SVGElement && (!element.hasAttribute('class') ||\n      element.getAttribute('class').indexOf(StyleTransformer$1.SCOPE_NAME) < 0)));\n  };\n\n  let handler = (mxns) => {\n    for (let x=0; x < mxns.length; x++) {\n      let mxn = mxns[x];\n      if (mxn.target === document.documentElement ||\n        mxn.target === document.head) {\n        continue;\n      }\n      for (let i=0; i < mxn.addedNodes.length; i++) {\n        let n = mxn.addedNodes[i];\n        if (elementNeedsScoping(n)) {\n          let root = n.getRootNode();\n          if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // may no longer be in a shadowroot\n            let host = root.host;\n            if (host) {\n              let scope = host.is || host.localName;\n              StyleTransformer$1.dom(n, scope);\n            }\n          }\n        }\n      }\n      for (let i=0; i < mxn.removedNodes.length; i++) {\n        let n = mxn.removedNodes[i];\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          let classes = undefined;\n          if (n.classList) {\n            classes = Array.from(n.classList);\n          } else if (n.hasAttribute('class')) {\n            classes = n.getAttribute('class').split(/\\s+/);\n          }\n          if (classes !== undefined) {\n            // NOTE: relies on the scoping class always being adjacent to the\n            // SCOPE_NAME class.\n            let classIdx = classes.indexOf(StyleTransformer$1.SCOPE_NAME);\n            if (classIdx >= 0) {\n              let scope = classes[classIdx + 1];\n              if (scope) {\n                StyleTransformer$1.dom(n, scope, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  };\n  let nativeCustomElements = (window.customElements &&\n    !window.customElements.flush);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    };\n    // use polyfill timing if it's available\n    if (window.HTMLImports) {\n      window.HTMLImports.whenReady(delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          };\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  };\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// TODO(dfreedm): consider spliting into separate global\nlet styleCache = new StyleCache();\n\nclass ShadyCSS {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = document.documentElement;\n    this._documentOwnerStyleInfo = StyleInfo.set(document.documentElement, new StyleInfo({rules: []}));\n    this._elementsHaveApplied = false;\n  }\n  get nativeShadow() {\n    return nativeShadow;\n  }\n  get nativeCss() {\n    return nativeCssVariables;\n  }\n  get nativeCssApply() {\n    return nativeCssApply;\n  }\n  flush() {\n    flush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return toCssText(ast);\n  }\n  _gatherStyles(template) {\n    let styles = template.content.querySelectorAll('style');\n    let cssText = [];\n    for (let i = 0; i < styles.length; i++) {\n      let s = styles[i];\n      cssText.push(s.textContent);\n      s.parentNode.removeChild(s);\n    }\n    return cssText.join('').trim();\n  }\n  _getCssBuild(template) {\n    let style = template.content.querySelector('style');\n    if (!style) {\n      return '';\n    }\n    return style.getAttribute('css-build') || '';\n  }\n  prepareTemplate(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = this._getCssBuild(template);\n    let cssText = this._gatherStyles(template);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n      __cssBuild: cssBuild,\n    };\n    if (!this.nativeShadow) {\n      StyleTransformer$1.dom(template.content, elementName);\n    }\n    // check if the styling has mixin definitions or uses\n    let hasMixins = applyShim.detectMixin(cssText);\n    let ast = parse(cssText);\n    // only run the applyshim transforms if there is a mixin involved\n    if (hasMixins && this.nativeCss && !this.nativeCssApply) {\n      applyShim.transformRules(ast, elementName);\n    }\n    template._styleAst = ast;\n\n    let ownPropertyNames = [];\n    if (!this.nativeCss) {\n      ownPropertyNames = StyleProperties$1.decorateStyles(template._styleAst, info);\n    }\n    if (!ownPropertyNames.length || this.nativeCss) {\n      let root = this.nativeShadow ? template.content : null;\n      let placeholder = placeholderMap[elementName];\n      let style = this._generateStaticStyle(info, template._styleAst, root, placeholder);\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  _generateStaticStyle(info, rules, shadowroot, placeholder) {\n    let cssText = StyleTransformer$1.elementStyles(info, rules);\n    if (cssText.length) {\n      return applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n  }\n  _prepareHost(host) {\n    let is = host.getAttribute('is') || host.localName;\n    let typeExtension;\n    if (is !== host.localName) {\n      typeExtension = host.localName;\n    }\n    let placeholder = placeholderMap[is];\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template._styleAst;\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = template._cssBuild;\n    }\n    return StyleInfo.set(host,\n      new StyleInfo(\n        ast,\n        placeholder,\n        ownStylePropertyNames,\n        is,\n        typeExtension,\n        cssBuild\n      )\n    );\n  }\n  applyStyle(host, overrideProps) {\n    let is = host.getAttribute('is') || host.localName;\n    let styleInfo = StyleInfo.get(host);\n    let hasApplied = Boolean(styleInfo);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (window.CustomStyle) {\n      let CS = window.CustomStyle;\n      if (CS._documentDirty) {\n        CS.findStyles();\n        if (!this.nativeCss) {\n          this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n        } else if (!this.nativeCssApply) {\n          CS._revalidateApplyShim();\n        }\n        CS.applyStyles();\n        // if no elements have booted yet, we can just update the document and be done\n        if (!this._elementsHaveApplied) {\n          return;\n        }\n        // if no native css custom properties, we must recalculate the whole tree\n        if (!this.nativeCss) {\n          this.updateStyles();\n          /*\n          When updateStyles() runs, this element may not have a shadowroot yet.\n          If not, we need to make sure that this element runs `applyStyle` on itself at least once to generate a style\n          */\n          if (hasApplied) {\n            return;\n          }\n        }\n      }\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (this.nativeCss) {\n      if (styleInfo.overrideStyleProperties) {\n        this._updateNativeProperties(host, styleInfo.overrideStyleProperties);\n      }\n      let template = templateMap[is];\n      // bail early if there is no shadowroot for this element\n      if (!template && !this._isRootOwner(host)) {\n        return;\n      }\n      if (template && template._applyShimInvalid && template._style) {\n        // update template\n        if (!template._validating) {\n          applyShim.transformRules(template._styleAst, is);\n          template._style.textContent = StyleTransformer$1.elementStyles(host, styleInfo.styleRules);\n          StyleInfo.startValidating(is);\n        }\n        // update instance if native shadowdom\n        if (this.nativeShadow) {\n          let root = host.shadowRoot;\n          if (root) {\n            let style = root.querySelector('style');\n            style.textContent = StyleTransformer$1.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n        styleInfo.styleRules = template._styleAst;\n      }\n    } else {\n      this._updateProperties(host, styleInfo);\n      if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n        this._applyStyleProperties(host, styleInfo);\n      }\n    }\n    if (hasApplied) {\n      let root = this._isRootOwner(host) ? host : host.shadowRoot;\n      // note: some elements may not have a root!\n      if (root) {\n        this._applyToDescendants(root);\n      }\n    }\n  }\n  _applyToDescendants(root) {\n    // note: fallback to childNodes to support recursing into SVG which\n    // does not support children in some browsers (Edge/IE)\n    let c$ = root.children || root.childNodes;\n    for (let i = 0, c; i < c$.length; i++) {\n      c = c$[i];\n      if (c.shadowRoot) {\n        this.applyStyle(c);\n      }\n      this._applyToDescendants(c);\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = host.getAttribute('is') || host.localName;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties$1.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!this.nativeShadow) {\n      StyleProperties$1.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties$1.hostAndRootPropertiesForScope(host, styleInfo.styleRules);\n    let propertyData = StyleProperties$1.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties;\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties$1.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  _updateNativeProperties(element, properties) {\n    // remove previous properties\n    for (let p in properties) {\n      // NOTE: for bc with shim, don't apply null values.\n      if (p === null) {\n        element.style.removeProperty(p);\n      } else {\n        element.style.setProperty(p, properties[p]);\n      }\n    }\n  }\n  updateStyles(properties) {\n    this.applyStyle(this._documentOwner, properties);\n  }\n  /* Custom Style operations */\n  _transformCustomStyleForDocument(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer$1.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer$1.documentRule(rule);\n      }\n      if (this.nativeCss && !this.nativeCssApply) {\n        applyShim.transformRule(rule);\n      }\n    });\n    if (this.nativeCss) {\n      style.textContent = toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules.rules.push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (this.nativeCss && !this.nativeCssApply) {\n      let ast = rulesForStyle(style);\n      applyShim.transformRules(ast);\n      style.textContent = toCssText(ast);\n    }\n  }\n  _applyCustomStyleToDocument(style) {\n    if (!this.nativeCss) {\n      StyleProperties$1.applyCustomStyle(style, this._documentOwnerStyleInfo.styleProperties);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!this.nativeCss) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value.trim();\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer$1.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer$1.SCOPE_NAME, scopeName);\n    }\n    if (!this.nativeCss) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties$1.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n}\n\nwindow['ShadyCSS'] = new ShadyCSS();\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nWrapper over <style> elements to co-operate with ShadyCSS\n\nExample:\n<custom-style>\n  <style>\n  ...\n  </style>\n</custom-style>\n*/\n\nlet ShadyCSS$1 = window.ShadyCSS;\n\nlet enqueued = false;\n\nlet customStyles = [];\n\nlet hookFn = null;\n\n/*\nIf a page only has <custom-style> elements, it will flash unstyled content,\nas all the instances will boot asynchronously after page load.\n\nCalling ShadyCSS.updateStyles() will force the work to happen synchronously\n*/\nfunction enqueueDocumentValidation() {\n  if (enqueued) {\n    return;\n  }\n  enqueued = true;\n  if (window.HTMLImports) {\n    window.HTMLImports.whenReady(validateDocument);\n  } else if (document.readyState === 'complete') {\n    validateDocument();\n  } else {\n    document.addEventListener('readystatechange', () => {\n      if (document.readyState === 'complete') {\n        validateDocument();\n      }\n    });\n  }\n}\n\nfunction validateDocument() {\n  requestAnimationFrame(() => {\n    if (enqueued || ShadyCSS$1._elementsHaveApplied) {\n      ShadyCSS$1.updateStyles();\n    }\n    enqueued = false;\n  });\n}\n\nclass CustomStyle extends HTMLElement {\n  static get _customStyles() {\n    return customStyles;\n  }\n  static get processHook() {\n    return hookFn;\n  }\n  static set processHook(fn) {\n    hookFn = fn;\n  }\n  static get _documentDirty() {\n    return enqueued;\n  }\n  static findStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (!c._style) {\n        let style = c.querySelector('style');\n        if (!style) {\n          continue;\n        }\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        if (style.__appliedElement) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            style.__appliedElement.setAttribute(attr.name, attr.value);\n          }\n        }\n        c._style = style.__appliedElement || style;\n        if (hookFn) {\n          hookFn(c._style);\n        }\n        ShadyCSS$1._transformCustomStyleForDocument(c._style);\n      }\n    }\n  }\n  static _revalidateApplyShim() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS$1._revalidateApplyShim(c._style);\n      }\n    }\n  }\n  static applyStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS$1._applyCustomStyleToDocument(c._style);\n      }\n    }\n    enqueued = false;\n  }\n  constructor() {\n    super();\n    customStyles.push(this);\n    enqueueDocumentValidation();\n  }\n}\n\nwindow['CustomStyle'] = CustomStyle;\nwindow.customElements.define('custom-style', CustomStyle);\n\n/**\r\n * @license\r\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  if (customElements && customElements.polyfillWrapFlushCallback) {\r\n    // Here we ensure that the public `HTMLImports.whenReady`\r\n    // always comes *after* custom elements have upgraded.\r\n    let flushCallback;\r\n    function runAndClearCallback() {\r\n      if (flushCallback) {\r\n        let cb = flushCallback;\r\n        flushCallback = null;\r\n        cb();\r\n        return true;\r\n      }\r\n    }\r\n    let origWhenReady = HTMLImports.whenReady;\r\n    customElements.polyfillWrapFlushCallback(function(cb) {\r\n      flushCallback = cb;\r\n      origWhenReady(runAndClearCallback);\r\n    });\r\n\r\n    HTMLImports.whenReady = function(cb) {\r\n      origWhenReady(function() {\r\n        // custom element code may add dynamic imports\r\n        // to match processing of native custom elements before\r\n        // domContentLoaded, we wait for these imports to resolve first.\r\n        if (runAndClearCallback()) {\r\n          HTMLImports.whenReady(cb);\r\n        } else {\r\n          cb();\r\n        }\r\n      });\r\n    };\r\n\r\n  }\r\n\r\n})();\n\n/**\r\n * @license\r\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n(function(scope) {\r\n\r\n  // It's desireable to provide a default stylesheet\r\n  // that's convenient for styling unresolved elements, but\r\n  // it's cumbersome to have to include this manually in every page.\r\n  // It would make sense to put inside some HTMLImport but\r\n  // the HTMLImports polyfill does not allow loading of stylesheets\r\n  // that block rendering. Therefore this injection is tolerated here.\r\n  //\r\n  // NOTE: position: relative fixes IE's failure to inherit opacity\r\n  // when a child is not statically positioned.\r\n  var style = document.createElement('style');\r\n  style.textContent = ''\r\n      + 'body {'\r\n      + 'transition: opacity ease-in 0.2s;'\r\n      + ' } \\n'\r\n      + 'body[unresolved] {'\r\n      + 'opacity: 0; display: block; overflow: hidden; position: relative;'\r\n      + ' } \\n'\r\n      ;\r\n  var head = document.querySelector('head');\r\n  head.insertBefore(style, head.firstChild);\r\n\r\n})(window.WebComponents);\n\n/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n(function() {\r\n  'use strict';\r\n  HTMLImports.whenReady(function() {\r\n    requestAnimationFrame(function() {\r\n      window.dispatchEvent(new CustomEvent('WebComponentsReady'));\r\n    });\r\n  });\r\n})();\n\n/**\r\n@license\r\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n/*\r\n * Polyfills loaded: HTML Imports\r\n * Used in: Safari Tech Preview\r\n */\r\n\r\n// TODO(notwaldorf): Remove after this is addressed:\r\n// https://github.com/webcomponents/shadycss/issues/46\n\n}());\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n// given a string of css, return a simple rule tree\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\nfunction lex(text) {\n  let root = {\n    start: 0,\n    end: text.length\n  };\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n.rules) {\n        n.rules = [];\n      }\n      let p = n;\n      let previous = p.rules[p.rules.length - 1];\n      n = {\n        start: i + 1,\n        parent: p,\n        previous: previous\n      };\n      p.rules.push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n.end = i + 1;\n      n = n.parent || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\nfunction parseCss(node, text) {\n  let t = text.substring(node.start, node.end - 1);\n  node.parsedCssText = node.cssText = t.trim();\n  if (node.parent) {\n    let ss = node.previous ? node.previous.end : node.parent.start;\n    t = text.substring(ss, node.start - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node.parsedSelector = node.selector = t.trim();\n    node.atRule = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node.atRule) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node.type = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node.type = types.KEYFRAMES_RULE;\n        node.keyframesName =\n          node.selector.split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node.type = types.MIXIN_RULE;\n      } else {\n        node.type = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node.rules;\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n// conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n// expanded form that doesn't require trailing space `\\000033`\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n// stringify parsed css.\nexport function stringify(node, preserveProperties, text) {\n  text = text || '';\n  // calc rule cssText\n  let cssText = '';\n  if (node.cssText || node.rules) {\n    let r$ = node.rules;\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node.cssText :\n        removeCustomProps(node.cssText);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node.selector) {\n      text += node.selector + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node.selector) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\nfunction _hasMixinRules(rules) {\n  return rules[0].selector.indexOf(VAR_START) === 0;\n}\n\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\nexport let types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nlet OPEN_BRACE = '{';\nlet CLOSE_BRACE = '}';\n\n// helper regexp's\nlet RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nlet VAR_START = '--';\nlet MEDIA_START = '@media';\nlet AT_START = '@';\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport let nativeShadow = !(window.ShadyDOM && window.ShadyDOM.inUse);\n// chrome 49 has semi-working css vars, check if box-shadow works\n// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\nexport let nativeCssVariables = (!navigator.userAgent.match('AppleWebKit/601') &&\nwindow.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n// experimental support for native @apply\nfunction detectNativeApply() {\n  let style = document.createElement('style');\n  style.textContent = '.foo { @apply --foo }';\n  document.head.appendChild(style);\n  let nativeCssApply = (style.sheet.cssRules[0].cssText.indexOf('apply') >= 0);\n  document.head.removeChild(style);\n  return nativeCssApply;\n}\n\nexport let nativeCssApply = false && detectNativeApply();\n\nfunction parseSettings(settings) {\n  if (settings) {\n    nativeCssVariables = nativeCssVariables && !settings.shimcssproperties;\n    nativeShadow = nativeShadow && !settings.shimshadow;\n  }\n}\n\nif (window.ShadyCSS) {\n  parseSettings(window.ShadyCSS);\n} else if (window.WebComponents) {\n  parseSettings(window.WebComponents.flags);\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables} from './style-settings'\nimport {parse, stringify, types} from './css-parse'\n\nexport function toCssText (rules, callback) {\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\nexport function rulesForStyle(style) {\n  if (!style.__cssRules && style.textContent) {\n    style.__cssRules = parse(style.textContent);\n  }\n  return style.__cssRules;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\nexport function isKeyframesSelector(rule) {\n  return rule.parent &&\n  rule.parent.type === types.KEYFRAMES_RULE;\n}\n\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  if (onlyActiveRules) {\n    if (node.type === types.MEDIA_RULE) {\n      let matchMedia = node.selector.match(rx.MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (node.type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    node.type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (node.type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node.rules;\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  return applyStyle(style, target, contextNode);\n}\n\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n  target.firstChild;\n  lastHeadApplyNode = style;\n  return target.insertBefore(style, after);\n}\n\nexport function createScopeStyle(cssText, moniker) {\n  let style = document.createElement('style');\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode.nextSibling : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n// cssBuildTypeForModule: function (module) {\n//   let dm = Polymer.DomModule.import(module);\n//   if (dm) {\n//     return getCssBuildType(dm);\n//   }\n// },\n//\nexport function getCssBuildType(element) {\n  return element.getAttribute('css-build');\n}\n\n// Walk from text[start] matching parens\n// returns position of the outer end paren\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (window.ShadyDOM) {\n    window.ShadyDOM.nativeMethods.setAttribute.call(element, 'class', value);\n  } else {\n    element.setAttribute('class', value);\n  }\n}\n\nexport let rx = {\n  VAR_ASSIGN: /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi,\n  MIXIN_MATCH: /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,\n  VAR_CONSUMED: /(--[\\w-]+)\\s*([:,;)]|$)/gi,\n  ANIMATION_MATCH: /(animation\\s*:)|(animation-name\\s*:)/,\n  MEDIA_MATCH: /@media[^(]*(\\([^)]*\\))/,\n  IS_VAR: /^--/,\n  BRACKETED: /\\{[^}]*\\}/g,\n  HOST_PREFIX: '(?:^|[^.#[:])',\n  HOST_SUFFIX: '($|[.:[\\\\s>+~])'\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {removeCustomPropAssignment} from './css-parse'\nimport {nativeShadow} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport * as StyleUtil from './style-util'\nimport StyleInfo from './style-info'\n\n// TODO: dedupe with shady\nconst p = window.Element.prototype;\nconst matchesSelector = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n  // decorates styles with rule info and returns an array of used style\n  // property names\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    StyleUtil.forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule.rules = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = StyleUtil.rx.VAR_ASSIGN;\n      let cssText = rule.parsedCssText;\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule.parsedCssText);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(StyleUtil.rx.BRACKETED, '')\n      .replace(StyleUtil.rx.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = StyleUtil.rx.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = StyleUtil.processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        StyleUtil.rx.MIXIN_MATCH.lastIndex = 0;\n        m = StyleUtil.rx.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule.cssText = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule.cssText;\n    let output = rule.cssText;\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = StyleUtil.rx.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule.cssText = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  propertyDataFromStyles(rules, element) {\n    let props = {}, self = this;\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, function(rule) {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        self.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          self.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let hostScope = scope.is ?\n    StyleTransformer._calcHostScope(scope.is, scope.extends) :\n    'html';\n    let parsedSelector = rule.parsedSelector;\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (cssBuild === 'shadow') {\n      isRoot = parsedSelector === ':host > *' || parsedSelector === 'html';\n      isHost = isHost && !isRoot;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n      if (nativeShadow && !rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer._transformRuleCss(\n          rule,\n          StyleTransformer._transformComplexSelector,\n          StyleTransformer._calcElementScope(scope.is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n\n  hostAndRootPropertiesForScope(scope, rules) {\n    let hostProps = {}, rootProps = {}, self = this;\n    // note: active rules excludes non-matching @media rules\n    let cssBuild = rules && rules.__cssBuild;\n    StyleUtil.forEachRule(rules, function(rule) {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      self.whenHostOrRootRule(scope, rule, cssBuild, function(info) {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            self.collectProperties(rule, hostProps);\n          } else {\n            self.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let hostSelector = StyleTransformer\n      ._calcHostScope(element.is, element.extends);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(StyleUtil.rx.HOST_PREFIX + rxHostSelector +\n      StyleUtil.rx.HOST_SUFFIX);\n    let rules = StyleInfo.get(element).styleRules;\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !StyleUtil.isKeyframesSelector(rule) &&\n          rule.cssText) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    });\n  }\n\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule.keyframesName] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n  // Transforms `@keyframes` names to be unique for the current host.\n  // Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n  _scopeKeyframes(rule, scopeId) {\n    rule.keyframesNameRx = new RegExp(rule.keyframesName, 'g');\n    rule.transformedKeyframesName = rule.keyframesName + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    rule.selector = rule.transformedSelector.replace(\n        rule.keyframesName, rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule.selector;\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = selector.split(',');\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule.selector = parts.join(',');\n  }\n\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      StyleUtil.setElementClassRaw(element, v);\n    }\n  }\n\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s._useCount--;\n      if (s._useCount <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = StyleUtil.applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = StyleUtil.applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        StyleUtil.applyStyle(style, null, styleInfo.placeholder);\n      }\n\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style._useCount = style._useCount || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style._useCount++;\n      }\n      styleInfo.customStyle = style;\n    }\n    // @media rules may be stale in IE 10 and 11\n    if (IS_IE) {\n      style.textContent = style.textContent;\n    }\n    return style;\n  }\n\n  applyCustomStyle(style, properties) {\n    let rules = StyleUtil.rulesForStyle(style);\n    let self = this;\n    style.textContent = StyleUtil.toCssText(rules, function(rule) {\n      let css = rule.cssText = rule.parsedCssText;\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(css);\n        // replace with reified properties, scenario is same as mixin\n        rule.cssText = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nexport default new StyleProperties();","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nWrapper over <style> elements to co-operate with ShadyCSS\n\nExample:\n<custom-style>\n  <style>\n  ...\n  </style>\n</custom-style>\n*/\n\n'use strict';\n\nlet ShadyCSS = window.ShadyCSS;\n\nlet enqueued = false;\n\nlet customStyles = [];\n\nlet hookFn = null;\n\n/*\nIf a page only has <custom-style> elements, it will flash unstyled content,\nas all the instances will boot asynchronously after page load.\n\nCalling ShadyCSS.updateStyles() will force the work to happen synchronously\n*/\nfunction enqueueDocumentValidation() {\n  if (enqueued) {\n    return;\n  }\n  enqueued = true;\n  if (window.HTMLImports) {\n    window.HTMLImports.whenReady(validateDocument);\n  } else if (document.readyState === 'complete') {\n    validateDocument();\n  } else {\n    document.addEventListener('readystatechange', () => {\n      if (document.readyState === 'complete') {\n        validateDocument();\n      }\n    });\n  }\n}\n\nfunction validateDocument() {\n  requestAnimationFrame(() => {\n    if (enqueued || ShadyCSS._elementsHaveApplied) {\n      ShadyCSS.updateStyles();\n    }\n    enqueued = false;\n  });\n}\n\nclass CustomStyle extends HTMLElement {\n  static get _customStyles() {\n    return customStyles;\n  }\n  static get processHook() {\n    return hookFn;\n  }\n  static set processHook(fn) {\n    hookFn = fn;\n  }\n  static get _documentDirty() {\n    return enqueued;\n  }\n  static findStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (!c._style) {\n        let style = c.querySelector('style');\n        if (!style) {\n          continue;\n        }\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        // Also, we must copy over the attributes.\n        if (style.__appliedElement) {\n          for (let i = 0; i < style.attributes.length; i++) {\n            let attr = style.attributes[i];\n            style.__appliedElement.setAttribute(attr.name, attr.value);\n          }\n        }\n        c._style = style.__appliedElement || style;\n        if (hookFn) {\n          hookFn(c._style);\n        }\n        ShadyCSS._transformCustomStyleForDocument(c._style);\n      }\n    }\n  }\n  static _revalidateApplyShim() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS._revalidateApplyShim(c._style);\n      }\n    }\n  }\n  static applyStyles() {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      if (c._style) {\n        ShadyCSS._applyCustomStyleToDocument(c._style);\n      }\n    }\n    enqueued = false;\n  }\n  constructor() {\n    super();\n    customStyles.push(this);\n    enqueueDocumentValidation();\n  }\n}\n\nwindow['CustomStyle'] = CustomStyle;\nwindow.customElements.define('custom-style', CustomStyle);","/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n(scope => {\n  'use strict';\n\n  /********************* base setup *********************/\n\n  // Polyfill `currentScript` for browsers without it.\n  let currentScript = null;\n  if ('currentScript' in document === false) {\n    Object.defineProperty(document, 'currentScript', {\n      get() {\n        return currentScript ||\n          // NOTE: only works when called in synchronously executing code.\n          // readyState should check if `loading` but IE10 is\n          // interactive when scripts run so we cheat. This is not needed by\n          // html-imports polyfill but helps generally polyfill `currentScript`.\n          (document.readyState !== 'complete' ?\n            document.scripts[document.scripts.length - 1] : null);\n      },\n      configurable: true\n    });\n  }\n\n  /********************* path fixup *********************/\n  const ABS_URL_TEST = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n  const CSS_URL_REGEXP = /(url\\()([^)]*)(\\))/g;\n  const CSS_IMPORT_REGEXP = /(@import[\\s]+(?!url\\())([^;]*)(;)/g;\n  const STYLESHEET_REGEXP = /(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g;\n\n  // path fixup: style elements in imports must be made relative to the main\n  // document. We fixup url's in url() and @import.\n  const Path = {\n\n    fixUrls(element, base) {\n      if (element.href) {\n        element.setAttribute('href',\n          Path.replaceAttrUrl(element.getAttribute('href'), base));\n      }\n      if (element.src) {\n        element.setAttribute('src',\n          Path.replaceAttrUrl(element.getAttribute('src'), base));\n      }\n      if (element.localName === 'style') {\n        Path.resolveUrlsInStyle(element, base);\n      }\n    },\n\n    fixUrlAttributes(element, base) {\n      const attrs = ['action', 'src', 'href', 'url', 'style'];\n      for (let i = 0, a; i < attrs.length && (a = attrs[i]); i++) {\n        const at = element.attributes[a];\n        const v = at && at.value;\n        // Skip bound attribute values (assume binding is done via {} and []).\n        // TODO(valdrin) consider exposing a library-implementable hook.\n        if (v && (v.search(/({{|\\[\\[)/) < 0)) {\n          at.value = (a === 'style') ?\n            Path.resolveUrlsInCssText(v, base) :\n            Path.replaceAttrUrl(v, base);\n        }\n      }\n    },\n\n    fixUrlsInTemplates(element, base) {\n      const t$ = element.querySelectorAll('template');\n      for (let i = 0; i < t$.length; i++) {\n        Path.fixUrlsInTemplate(t$[i], base);\n      }\n    },\n\n    fixUrlsInTemplate(template, base) {\n      // If template is not supported, still resolve urls within it.\n      const content = template.content || template;\n      const n$ = content.querySelectorAll(\n        'style, form[action], [src], [href], [url], [style]');\n      for (let i = 0; i < n$.length; i++) {\n        const n = n$[i];\n        if (n.localName == 'style') {\n          Path.resolveUrlsInStyle(n, base);\n        } else {\n          Path.fixUrlAttributes(n, base);\n        }\n      }\n      Path.fixUrlsInTemplates(content, base);\n    },\n\n    resolveUrlsInStyle(style, linkUrl) {\n      style.textContent = Path.resolveUrlsInCssText(style.textContent, linkUrl);\n    },\n\n    resolveUrlsInCssText(cssText, linkUrl) {\n      let r = Path.replaceUrls(cssText, linkUrl, CSS_URL_REGEXP);\n      r = Path.replaceUrls(r, linkUrl, CSS_IMPORT_REGEXP);\n      return r;\n    },\n\n    replaceUrls(text, linkUrl, regexp) {\n      return text.replace(regexp, (m, pre, url, post) => {\n        let urlPath = url.replace(/[\"']/g, '');\n        if (linkUrl) {\n          urlPath = Path.resolveUrl(urlPath, linkUrl);\n        }\n        return pre + '\\'' + urlPath + '\\'' + post;\n      });\n    },\n\n    replaceAttrUrl(text, linkUrl) {\n      if (text && ABS_URL_TEST.test(text)) {\n        return text;\n      } else {\n        return Path.resolveUrl(text, linkUrl);\n      }\n    },\n\n    resolveUrl(url, base) {\n      // Lazy feature detection.\n      if (Path.__workingURL === undefined) {\n        Path.__workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          Path.__workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {}\n      }\n\n      if (Path.__workingURL) {\n        return (new URL(url, base)).href;\n      }\n\n      // Fallback to creating an anchor into a disconnected document.\n      let doc = Path.__tempDoc;\n      if (!doc) {\n        doc = document.implementation.createHTMLDocument('temp');\n        Path.__tempDoc = doc;\n        doc.__base = doc.createElement('base');\n        doc.head.appendChild(doc.__base);\n        doc.__anchor = doc.createElement('a');\n      }\n      doc.__base.href = base;\n      doc.__anchor.href = url;\n      return doc.__anchor.href || url;\n    }\n  };\n\n  /********************* Xhr processor *********************/\n  const Xhr = {\n\n    async: true,\n\n    /**\n     * @param {!string} url\n     * @param {!function(!string, string=)} success\n     * @param {!function(!string)} fail\n     */\n    load(url, success, fail) {\n      if (!url) {\n        fail('error: href must be specified');\n      } else if (url.match(/^data:/)) {\n        // Handle Data URI Scheme\n        const pieces = url.split(',');\n        const header = pieces[0];\n        let resource = pieces[1];\n        if (header.indexOf(';base64') > -1) {\n          resource = atob(resource);\n        } else {\n          resource = decodeURIComponent(resource);\n        }\n        success(resource);\n      } else {\n        const request = new XMLHttpRequest();\n        request.open('GET', url, Xhr.async);\n        request.onload = () => {\n          // Servers redirecting an import can add a Location header to help us\n          // polyfill correctly. Handle relative and full paths.\n          let redirectedUrl = request.getResponseHeader('Location');\n          if (redirectedUrl && redirectedUrl.indexOf('/') === 0) {\n            // In IE location.origin might not work\n            // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7\n            const origin = (location.origin || location.protocol + '//' + location.host);\n            redirectedUrl = origin + redirectedUrl;\n          }\n          const resource = /** @type {string} */ (request.response || request.responseText);\n          if (request.status === 304 || request.status === 0 ||\n            request.status >= 200 && request.status < 300) {\n            success(resource, redirectedUrl);\n          } else {\n            fail(resource);\n          }\n        };\n        request.send();\n      }\n    }\n  };\n\n  /********************* importer *********************/\n\n  const isIE = /Trident/.test(navigator.userAgent) ||\n    /Edge\\/\\d./i.test(navigator.userAgent);\n\n  const importSelector = 'link[rel=import]';\n\n  // Used to disable loading of resources.\n  const importDisableType = 'import-disable';\n\n  const disabledLinkSelector = `link[rel=stylesheet][href][type=${importDisableType}]`;\n\n  const importDependenciesSelector = `${importSelector}, ${disabledLinkSelector},\n    style:not([type]), link[rel=stylesheet][href]:not([type]),\n    script:not([type]), script[type=\"application/javascript\"],\n    script[type=\"text/javascript\"]`;\n\n  const importDependencyAttr = 'import-dependency';\n\n  const rootImportSelector = `${importSelector}:not(${importDependencyAttr})`;\n\n  const pendingScriptsSelector = `script[${importDependencyAttr}]`;\n\n  const pendingStylesSelector = `style[${importDependencyAttr}],\n    link[rel=stylesheet][${importDependencyAttr}]`;\n\n  /**\n   * Importer will:\n   * - load any linked import documents (with deduping)\n   * - whenever an import is loaded, prompt the parser to try to parse\n   * - observe imported documents for new elements (these are handled via the\n   *   dynamic importer)\n   */\n  class Importer {\n    constructor() {\n      this.documents = {};\n      // Used to keep track of pending loads, so that flattening and firing of\n      // events can be done when all resources are ready.\n      this.inflight = 0;\n      // Used to observe changes on <head>, keep track so we can stop observer\n      // while flattening.\n      this.dynamicImportsMO = new MutationObserver(m => this.handleMutations(m));\n      this.dynamicImportsMO.observe(document.head, {\n        childList: true,\n        subtree: true\n      });\n      // 1. Load imports contents\n      // 2. Assign them to first import links on the document\n      // 3. Wait for import styles & scripts to be done loading/running\n      // 4. Fire load/error events\n      this.loadImports(document);\n    }\n\n    /**\n     * @param {!(HTMLDocument|DocumentFragment|Element)} doc\n     */\n    loadImports(doc) {\n      const links = /** @type {!NodeList<!HTMLLinkElement>} */\n        (doc.querySelectorAll(importSelector));\n      for (let i = 0, l = links.length; i < l; i++) {\n        this.loadImport(links[i]);\n      }\n      this.processImportsIfLoadingDone();\n    }\n\n    /**\n     * @param {!HTMLLinkElement} link\n     */\n    loadImport(link) {\n      const url = link.href;\n      // This resource is already being handled by another import.\n      if (this.documents[url] !== undefined) {\n        // If import is already loaded, we can safely associate it to the link\n        // and fire the load/error event.\n        const imp = this.documents[url];\n        if (imp && imp['__loaded']) {\n          link.import = imp;\n          this.fireEventIfNeeded(link);\n        }\n        return;\n      }\n      this.inflight++;\n      // Mark it as pending to notify others this url is being loaded.\n      this.documents[url] = 'pending';\n      Xhr.load(url, (resource, redirectedUrl) => {\n        const doc = this.makeDocument(resource, redirectedUrl || url);\n        this.documents[url] = doc;\n        this.inflight--;\n        // Load subtree.\n        this.loadImports(doc);\n      }, () => {\n        // If load fails, handle error.\n        this.documents[url] = null;\n        this.inflight--;\n        this.processImportsIfLoadingDone();\n      });\n    }\n\n    /**\n     * Creates a new document containing resource and normalizes urls accordingly.\n     * @param {string=} resource\n     * @param {string=} url\n     * @return {!DocumentFragment}\n     */\n    makeDocument(resource, url) {\n      if (!resource) {\n        return document.createDocumentFragment();\n      }\n\n      if (isIE) {\n        // <link rel=stylesheet> should be appended to <head>. Not doing so\n        // in IE/Edge breaks the cascading order. We disable the loading by\n        // setting the type before setting innerHTML to avoid loading\n        // resources twice.\n        resource = resource.replace(STYLESHEET_REGEXP, (match, p1, p2) => {\n          if (match.indexOf('type=') === -1) {\n            return `${p1} type=${importDisableType} ${p2}`;\n          }\n          return match;\n        });\n      }\n\n      let content;\n      const template = /** @type {!HTMLTemplateElement} */\n        (document.createElement('template'));\n      template.innerHTML = resource;\n      if (template.content) {\n        // This creates issues in Safari10 when used with shadydom (see #12).\n        content = template.content;\n      } else {\n        // <template> not supported, create fragment and move content into it.\n        content = document.createDocumentFragment();\n        while (template.firstChild) {\n          content.appendChild(template.firstChild);\n        }\n      }\n\n      // Support <base> in imported docs. Resolve url and remove its href.\n      const baseEl = content.querySelector('base');\n      if (baseEl) {\n        url = Path.replaceAttrUrl(baseEl.getAttribute('href'), url);\n        baseEl.removeAttribute('href');\n      }\n\n      // This is specific to users of <dom-module> (Polymer).\n      // TODO(valdrin) remove this when Polymer uses importForElement.\n      const s$ = content.querySelectorAll('dom-module');\n      for (let i = 0, s; i < s$.length && (s = s$[i]); i++) {\n        s.setAttribute('assetpath',\n          Path.replaceAttrUrl(s.getAttribute('assetpath') || '', url));\n      }\n\n      const n$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)>} */\n        (content.querySelectorAll(importDependenciesSelector));\n      // For source map hints.\n      let inlineScriptIndex = 0;\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\n        // Listen for load/error events, then fix urls.\n        whenElementLoaded(n);\n        Path.fixUrls(n, url);\n        // Mark for easier selectors.\n        n.setAttribute(importDependencyAttr, '');\n        // Generate source map hints for inline scripts.\n        if (n.localName === 'script' && !n.src && n.textContent) {\n          const num = inlineScriptIndex ? `-${inlineScriptIndex}` : '';\n          const content = n.textContent + `\\n//# sourceURL=${url}${num}.js\\n`;\n          // We use the src attribute so it triggers load/error events, and it's\n          // easier to capture errors (e.g. parsing) like this.\n          n.setAttribute('src', 'data:text/javascript;charset=utf-8,' + encodeURIComponent(content));\n          n.textContent = '';\n          inlineScriptIndex++;\n        }\n      }\n      Path.fixUrlsInTemplates(content, url);\n      return content;\n    }\n\n    /**\n     * Waits for loaded imports to finish loading scripts and styles, then fires\n     * the load/error events.\n     */\n    processImportsIfLoadingDone() {\n      // Wait until all resources are ready, then load import resources.\n      if (this.inflight) {\n        return;\n      }\n\n      // Stop observing, flatten & load resource, then restart observing <head>.\n      this.dynamicImportsMO.disconnect();\n      this.flatten(document);\n      // We wait for styles to load, and at the same time we execute the scripts,\n      // then fire the load/error events for imports to have faster whenReady\n      // callback execution.\n      // NOTE: This is different for native behavior where scripts would be\n      // executed after the styles before them are loaded.\n      // To achieve that, we could select pending styles and scripts in the\n      // document and execute them sequentially in their dom order.\n      let scriptsOk = false,\n        stylesOk = false;\n      const onLoadingDone = () => {\n        if (stylesOk && scriptsOk) {\n          // Restart observing.\n          this.dynamicImportsMO.observe(document.head, {\n            childList: true,\n            subtree: true\n          });\n          this.fireEvents();\n        }\n      }\n      this.waitForStyles(() => {\n        stylesOk = true;\n        onLoadingDone();\n      });\n      this.runScripts(() => {\n        scriptsOk = true;\n        onLoadingDone();\n      });\n    }\n\n    /**\n     * @param {!HTMLDocument} doc\n     */\n    flatten(doc) {\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\n        (doc.querySelectorAll(importSelector));\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\n        const imp = this.documents[n.href];\n        n.import = /** @type {!Document} */ (imp);\n        if (imp && imp.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          // We set the .import to be the link itself, and update its readyState.\n          // Other links with the same href will point to this link.\n          this.documents[n.href] = n;\n          n.readyState = 'loading';\n          // Suppress Closure warning about incompatible subtype assignment.\n          ( /** @type {!HTMLElement} */ (n).import = n);\n          this.flatten(imp);\n          n.appendChild(imp);\n        }\n      }\n    }\n\n    /**\n     * Replaces all the imported scripts with a clone in order to execute them.\n     * Updates the `currentScript`.\n     * @param {!function()} callback\n     */\n    runScripts(callback) {\n      const s$ = document.querySelectorAll(pendingScriptsSelector);\n      const l = s$.length;\n      const cloneScript = i => {\n        if (i < l) {\n          // The pending scripts have been generated through innerHTML and\n          // browsers won't execute them for security reasons. We cannot use\n          // s.cloneNode(true) either, the only way to run the script is manually\n          // creating a new element and copying its attributes.\n          const s = s$[i];\n          const clone = /** @type {!HTMLScriptElement} */\n            (document.createElement('script'));\n          // Remove import-dependency attribute to avoid double cloning.\n          s.removeAttribute(importDependencyAttr);\n          for (let j = 0, ll = s.attributes.length; j < ll; j++) {\n            clone.setAttribute(s.attributes[j].name, s.attributes[j].value);\n          }\n          // Update currentScript and replace original with clone script.\n          currentScript = clone;\n          s.parentNode.replaceChild(clone, s);\n          whenElementLoaded(clone, () => {\n            currentScript = null;\n            cloneScript(i + 1);\n          });\n        } else {\n          callback();\n        }\n      };\n      cloneScript(0);\n    }\n\n    /**\n     * Waits for all the imported stylesheets/styles to be loaded.\n     * @param {!function()} callback\n     */\n    waitForStyles(callback) {\n      const s$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLStyleElement)>} */\n        (document.querySelectorAll(pendingStylesSelector));\n      let pending = s$.length;\n      if (!pending) {\n        callback();\n        return;\n      }\n      // <link rel=stylesheet> should be appended to <head>. Not doing so\n      // in IE/Edge breaks the cascading order\n      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10472273/\n      // If there is one <link rel=stylesheet> imported, we must move all imported\n      // links and styles to <head>.\n      const needsMove = isIE && !!document.querySelector(disabledLinkSelector);\n      for (let i = 0, l = s$.length, s; i < l && (s = s$[i]); i++) {\n        // Listen for load/error events, remove selector once is done loading.\n        whenElementLoaded(s, () => {\n          s.removeAttribute(importDependencyAttr);\n          if (--pending === 0) {\n            callback();\n          }\n        });\n        // Check if was already moved to head, to handle the case where the element\n        // has already been moved but it is still loading.\n        if (needsMove && s.parentNode !== document.head) {\n          let rootImport = importForElement(s);\n          while (rootImport && importForElement(rootImport)) {\n            rootImport = importForElement(rootImport);\n          }\n          // Replace the element we're about to move with a placeholder.\n          // NOTE: we first have to append the element to the new parent, then\n          // we can put the placeholder at its place, otherwise load/error events\n          // seem to be fired too early.\n          const parent = s.parentNode,\n            next = s.nextSibling,\n            placeholder = document.createElement(s.localName);\n          // Add reference of the moved element.\n          placeholder['__appliedElement'] = s;\n          // Disable this from appearing in document.styleSheets.\n          placeholder.setAttribute('type', 'import-placeholder');\n          // First, re-parent the element...\n          if (rootImport.parentNode === document.head) {\n            document.head.insertBefore(s, rootImport);\n          } else {\n            document.head.appendChild(s);\n          }\n          // ...and then, insert the placeholder at the right place.\n          parent.insertBefore(placeholder, next);\n          // Enable the loading of <link rel=stylesheet>.\n          s.removeAttribute('type');\n        }\n      }\n    }\n\n    /**\n     * Fires load/error events for imports in the right order .\n     */\n    fireEvents() {\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\n        (document.querySelectorAll(importSelector));\n      // Inverse order to have events firing bottom-up.\n      for (let i = n$.length - 1, n; i >= 0 && (n = n$[i]); i--) {\n        this.fireEventIfNeeded(n);\n      }\n    }\n\n    /**\n     * Fires load/error event for the import if this wasn't done already.\n     * @param {!HTMLLinkElement} link\n     */\n    fireEventIfNeeded(link) {\n      // Don't fire twice same event.\n      if (!link['__loaded']) {\n        link['__loaded'] = true;\n        // Update link's import readyState.\n        link.import && (link.import.readyState = 'complete');\n        const eventType = link.import ? 'load' : 'error';\n        link.dispatchEvent(newCustomEvent(eventType, {\n          bubbles: false,\n          cancelable: false,\n          detail: undefined\n        }));\n      }\n    }\n\n    /**\n     * @param {Array<MutationRecord>} mutations\n     */\n    handleMutations(mutations) {\n      for (let i = 0; i < mutations.length; i++) {\n        const m = mutations[i];\n        if (!m.addedNodes) {\n          continue;\n        }\n        for (let ii = 0; ii < m.addedNodes.length; ii++) {\n          const link = m.addedNodes[ii];\n          if (!link || link.nodeType !== Node.ELEMENT_NODE) {\n            continue;\n          }\n          // NOTE: added scripts are not updating currentScript in IE.\n          // TODO add test w/ script & stylesheet maybe\n          if (isImportLink(link)) {\n            this.loadImport( /** @type {!HTMLLinkElement} */ (link));\n          } else {\n            this.loadImports( /** @type {!Element} */ (link));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  const isImportLink = node => {\n    return node.nodeType === Node.ELEMENT_NODE && node.localName === 'link' &&\n      ( /** @type {!HTMLLinkElement} */ (node).rel === 'import');\n  };\n\n  /**\n   * Waits for an element to finish loading. If already done loading, it will\n   * mark the element accordingly.\n   * @param {!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)} element\n   * @param {function()=} callback\n   */\n  const whenElementLoaded = (element, callback) => {\n    if (element['__loaded']) {\n      callback && callback();\n    } else if (element.localName === 'script' && !element.src) {\n      // Inline scripts don't trigger load/error events, consider them already loaded.\n      element['__loaded'] = true;\n      callback && callback();\n    } else {\n      const onLoadingDone = event => {\n        element.removeEventListener(event.type, onLoadingDone);\n        element['__loaded'] = true;\n        callback && callback();\n      };\n      element.addEventListener('load', onLoadingDone);\n      // NOTE: We listen only for load events in IE/Edge, because in IE/Edge\n      // <style> with @import will fire error events for each failing @import,\n      // and finally will trigger the load event when all @import are\n      // finished (even if all fail).\n      if (!isIE || element.localName !== 'style') {\n        element.addEventListener('error', onLoadingDone);\n      }\n    }\n  }\n\n  /**\n   * Calls the callback when all imports in the document at call time\n   * (or at least document ready) have loaded. Callback is called synchronously\n   * if imports are already done loading.\n   * @param {!function()} callback\n   */\n  const whenReady = callback => {\n    // 1. ensure the document is in a ready state (has dom), then\n    // 2. watch for loading of imports and call callback when done\n    whenDocumentReady(() => whenImportsReady(callback));\n  }\n\n  /**\n   * Invokes the callback when document is in ready state. Callback is called\n   *  synchronously if document is already done loading.\n   * @param {!function()} callback\n   */\n  const whenDocumentReady = callback => {\n    if (document.readyState !== 'loading') {\n      callback();\n    } else {\n      const stateChanged = () => {\n        if (document.readyState !== 'loading') {\n          document.removeEventListener('readystatechange', stateChanged);\n          callback();\n        }\n      }\n      document.addEventListener('readystatechange', stateChanged);\n    }\n  }\n\n  /**\n   * Invokes the callback after all imports are loaded. Callback is called\n   * synchronously if imports are already done loading.\n   * @param {!function()} callback\n   */\n  const whenImportsReady = callback => {\n    let imports = /** @type {!NodeList<!HTMLLinkElement>} */\n      (document.querySelectorAll(rootImportSelector));\n    let pending = imports.length;\n    if (!pending) {\n      callback();\n      return;\n    }\n    for (let i = 0, l = imports.length, imp; i < l && (imp = imports[i]); i++) {\n      whenElementLoaded(imp, () => {\n        if (--pending === 0) {\n          callback();\n        }\n      });\n    }\n  }\n\n  /**\n   * Returns the link that imported the element.\n   * @param {!Node} element\n   * @return {HTMLLinkElement|Document|undefined}\n   */\n  const importForElement = element => {\n    let owner = element['__ownerImport'];\n    if (!owner) {\n      owner = element;\n      // Walk up the parent tree until we find an import.\n      while ((owner = owner.parentNode || owner.host) && !isImportLink(owner)) {}\n      element['__ownerImport'] = owner;\n    }\n    return owner;\n  }\n\n  const newCustomEvent = (type, params) => {\n    if (typeof window.CustomEvent === 'function') {\n      return new CustomEvent(type, params);\n    }\n    const event = /** @type {!CustomEvent} */ (document.createEvent('CustomEvent'));\n    event.initCustomEvent(type, Boolean(params.bubbles), Boolean(params.cancelable), params.detail);\n    return event;\n  };\n\n  // Initialize Importer only after document is ready.\n  whenDocumentReady(() => new Importer());\n\n  /**\n    Add support for the `HTMLImportsLoaded` event and the `HTMLImports.whenReady`\n    method. This api is necessary because unlike the native implementation,\n    script elements do not force imports to resolve. Instead, users should wrap\n    code in either an `HTMLImportsLoaded` handler or after load time in an\n    `HTMLImports.whenReady(callback)` call.\n   */\n  whenReady(() => document.dispatchEvent(newCustomEvent('HTMLImportsLoaded', {\n    cancelable: true,\n    bubbles: true,\n    detail: undefined\n  })));\n\n  // exports\n  scope.useNative = false;\n  scope.whenReady = whenReady;\n  scope.importForElement = importForElement;\n\n})(window.HTMLImports = (window.HTMLImports || {}));\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport * as StyleUtil from './style-util'\nimport {nativeShadow} from './style-settings'\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  // Given a node and scope name, add a scoping class to each node\n  // in the tree. This facilitates transforming css into scoped rules.\n  dom(node, scope, shouldRemoveScope) {\n    // one time optimization to skip scoping...\n    if (node.__styleScoped) {\n      node.__styleScoped = null;\n    } else {\n      this._transformDom(node, scope || '', shouldRemoveScope);\n    }\n  }\n\n  _transformDom(node, selector, shouldRemoveScope) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      this.element(node, selector, shouldRemoveScope);\n    }\n    let c$ = (node.localName === 'template') ?\n      (node.content || node._content).childNodes :\n      node.children || node.childNodes;\n    if (c$) {\n      for (let i=0; i<c$.length; i++) {\n        this._transformDom(c$[i], selector, shouldRemoveScope);\n      }\n    }\n  }\n\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            StyleUtil.setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          StyleUtil.setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  elementStyles(element, styleRules, callback) {\n    let cssBuildType = element.__cssBuild;\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    let cssText = (nativeShadow || cssBuildType === 'shady') ?\n    StyleUtil.toCssText(styleRules, callback) :\n    this.css(styleRules, element.is, element.extends, callback) + '\\n\\n';\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return StyleUtil.toCssText(rules, function(rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? '[is=' +  scope + ']' : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  // transforms a css rule to a scoped rule.\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule.selector = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = rule.selector.split(COMPLEX_SELECTOR_SEP);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!StyleUtil.isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.join(COMPLEX_SELECTOR_SEP);\n  }\n\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`);\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    let p$ = selector.split(PSEUDO_PREFIX);\n    p$[0] += scope;\n    return p$.join(PSEUDO_PREFIX);\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule.selector = rule.parsedSelector;\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  normalizeRootSelector(rule) {\n    if (rule.selector === ROOT) {\n      rule.selector = 'html';\n    }\n  }\n\n  _transformDocumentSelector(selector) {\n    return selector.match(SLOTTED) ?\n      this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n      this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n  }\n}\n\nlet NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nlet SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nlet COMPLEX_SELECTOR_SEP = ',';\nlet SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\nlet SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nlet HOST = ':host';\nlet ROOT = ':root';\nlet SLOTTED = '::slotted';\nlet SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nlet HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nlet SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nlet DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nlet CSS_CLASS_PREFIX = '.';\nlet PSEUDO_PREFIX = ':';\nlet CLASS = 'class';\nlet SELECTOR_NO_MATCH = 'should_not_match';\n\nexport default new StyleTransformer()","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport default {};\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport templateMap from './template-map'\n\nconst promise = Promise.resolve();\n\nexport default class StyleInfo {\n  static get(node) {\n    return node.__styleInfo;\n  }\n  static set(node, styleInfo) {\n    node.__styleInfo = styleInfo;\n    return styleInfo;\n  }\n  static invalidate(elementName) {\n    if (templateMap[elementName]) {\n      templateMap[elementName]._applyShimInvalid = true;\n    }\n  }\n  /*\n  the template is marked as `validating` for one microtask so that all instances\n  found in the tree crawl of `applyStyle` will update themselves,\n  but the template will only be updated once.\n  */\n  static startValidating(elementName) {\n    const template = templateMap[elementName];\n    if (!template._validating) {\n      template._validating = true;\n      promise.then(() => {\n        template._applyShimInvalid = false;\n        template._validating = false;\n      });\n    }\n  }\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    this.styleRules = ast || null;\n    this.placeholder = placeholder || null;\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    this.overrideStyleProperties = null;\n    this.elementName = elementName || '';\n    this.cssBuild = cssBuild || '';\n    this.typeExtension = typeExtension || '';\n    this.styleProperties = null;\n    this.scopeSelector = null;\n    this.customStyle = null;\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {applyStylePlaceHolder} from './style-util'\nimport {nativeShadow} from './style-settings'\n\nlet placeholderMap = {};\n\nconst ce = window.customElements;\nif (ce && !nativeShadow) {\n  const origDefine = ce.define;\n  ce.define = function(name, clazz, options) {\n    placeholderMap[name] = applyStylePlaceHolder(name);\n    return origDefine.call(ce, name, clazz, options);\n  };\n}\n\nexport default placeholderMap;\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    @apply --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\nimport {rx, forEachRule, processVariableAndFallback, rulesForStyle} from './style-util'\nimport templateMap from './template-map'\nimport StyleInfo from './style-info'\n\nlet MIXIN_MATCH = rx.MIXIN_MATCH;\nlet VAR_ASSIGN = rx.VAR_ASSIGN;\n\nlet APPLY_NAME_CLEAN = /;\\s*/m;\nlet INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nlet MIXIN_VAR_SEP = '_-_';\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    this._map = {};\n  }\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  get(name) {\n    name = name.trim();\n    return this._map[name];\n  }\n}\n\nclass ApplyShim {\n  constructor() {\n    this._currentTemplate = null;\n    this._measureElement = null;\n    this._map = new MixinMap();\n    this._separator = MIXIN_VAR_SEP;\n    this._boundProduceCssProperties = (\n      matchText, propertyName, valueProperty, valueMixin) =>\n        this._produceCssProperties(\n          matchText, propertyName, valueProperty, valueMixin);\n  }\n  // return true if `cssText` contains a mixin definition or consumption\n  detectMixin(cssText) {\n    const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n    // reset state of the regexes\n    MIXIN_MATCH.lastIndex = 0;\n    VAR_ASSIGN.lastIndex = 0;\n    return has;\n  }\n  transformStyle(style, elementName) {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    return ast;\n  }\n  transformRules(rules, elementName) {\n    this._currentTemplate = templateMap[elementName];\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentTemplate = null;\n  }\n  transformRule(rule) {\n    rule.cssText = this.transformCssText(rule.parsedCssText);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule.selector === ':root') {\n      rule.selector = ':host > *';\n    }\n  }\n  transformCssText(cssText) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, this._boundProduceCssProperties);\n    // consume mixins\n    return this._consumeCssProperties(cssText);\n  }\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = document.createElement('meta');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  // replace mixin consumption with variable consumption\n  _consumeCssProperties(text) {\n    let m;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = this._cssTextToMap(textBeforeApply);\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = [textBeforeApply, replacement, textAfterApply].join('');\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  // produce variable consumption at the site of mixin consumption\n  // @apply --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n  // Example:\n  // border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentTemplate) {\n        mixinEntry.dependants[this._currentTemplate.name] = this._currentTemplate;\n      }\n      let p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = ApplyShim._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  // \"parse\" a mixin definition into a map of properties and values\n  // cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n  _cssTextToMap(text) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  _invalidateMixinEntry(mixinEntry) {\n    for (let elementName in mixinEntry.dependants) {\n      if (!this._currentTemplate || elementName !== this._currentTemplate.name) {\n        StyleInfo.invalidate(elementName);\n      }\n    }\n  }\n\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = '@apply ' + value + ';';\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(propertyName + MIXIN_VAR_SEP + p + ': ' + v);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = matchText + ';' + prefix;\n    }\n    return prefix + out.join('; ') + ';';\n  }\n}\n\nlet applyShim = new ApplyShim();\nwindow['ApplyShim'] = applyShim;\nexport default applyShim;\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow} from './style-settings'\nimport StyleTransformer from './style-transformer'\n\nexport let flush = function() {};\n\nif (!nativeShadow) {\n  let elementNeedsScoping = (element) => {\n    return (element.classList &&\n      !element.classList.contains(StyleTransformer.SCOPE_NAME) ||\n      // note: necessary for IE11\n      (element instanceof SVGElement && (!element.hasAttribute('class') ||\n      element.getAttribute('class').indexOf(StyleTransformer.SCOPE_NAME) < 0)));\n  }\n\n  let handler = (mxns) => {\n    for (let x=0; x < mxns.length; x++) {\n      let mxn = mxns[x];\n      if (mxn.target === document.documentElement ||\n        mxn.target === document.head) {\n        continue;\n      }\n      for (let i=0; i < mxn.addedNodes.length; i++) {\n        let n = mxn.addedNodes[i];\n        if (elementNeedsScoping(n)) {\n          let root = n.getRootNode();\n          if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // may no longer be in a shadowroot\n            let host = root.host;\n            if (host) {\n              let scope = host.is || host.localName;\n              StyleTransformer.dom(n, scope);\n            }\n          }\n        }\n      }\n      for (let i=0; i < mxn.removedNodes.length; i++) {\n        let n = mxn.removedNodes[i];\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          let classes = undefined;\n          if (n.classList) {\n            classes = Array.from(n.classList);\n          } else if (n.hasAttribute('class')) {\n            classes = n.getAttribute('class').split(/\\s+/);\n          }\n          if (classes !== undefined) {\n            // NOTE: relies on the scoping class always being adjacent to the\n            // SCOPE_NAME class.\n            let classIdx = classes.indexOf(StyleTransformer.SCOPE_NAME);\n            if (classIdx >= 0) {\n              let scope = classes[classIdx + 1];\n              if (scope) {\n                StyleTransformer.dom(n, scope, true);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  }\n  let nativeCustomElements = (window.customElements &&\n    !window.customElements.flush);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    }\n    // use polyfill timing if it's available\n    if (window.HTMLImports) {\n      window.HTMLImports.whenReady(delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          }\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {parse} from './css-parse'\nimport {nativeShadow, nativeCssVariables, nativeCssApply} from './style-settings'\nimport StyleTransformer from './style-transformer'\nimport * as StyleUtil from './style-util'\nimport StyleProperties from './style-properties'\nimport templateMap from './template-map'\nimport placeholderMap from './style-placeholder'\nimport StyleInfo from './style-info'\nimport StyleCache from './style-cache'\n\n// TODO(dfreedm): consider spliting into separate global\nimport ApplyShim from './apply-shim'\nimport {flush as watcherFlush} from './document-watcher'\n\nlet styleCache = new StyleCache();\n\nclass ShadyCSS {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = document.documentElement;\n    this._documentOwnerStyleInfo = StyleInfo.set(document.documentElement, new StyleInfo({rules: []}));\n    this._elementsHaveApplied = false;\n  }\n  get nativeShadow() {\n    return nativeShadow;\n  }\n  get nativeCss() {\n    return nativeCssVariables;\n  }\n  get nativeCssApply() {\n    return nativeCssApply;\n  }\n  flush() {\n    watcherFlush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return StyleUtil.rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return StyleUtil.toCssText(ast);\n  }\n  _gatherStyles(template) {\n    let styles = template.content.querySelectorAll('style');\n    let cssText = [];\n    for (let i = 0; i < styles.length; i++) {\n      let s = styles[i];\n      cssText.push(s.textContent);\n      s.parentNode.removeChild(s);\n    }\n    return cssText.join('').trim();\n  }\n  _getCssBuild(template) {\n    let style = template.content.querySelector('style');\n    if (!style) {\n      return '';\n    }\n    return style.getAttribute('css-build') || '';\n  }\n  prepareTemplate(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = this._getCssBuild(template);\n    let cssText = this._gatherStyles(template);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n      __cssBuild: cssBuild,\n    };\n    if (!this.nativeShadow) {\n      StyleTransformer.dom(template.content, elementName);\n    }\n    // check if the styling has mixin definitions or uses\n    let hasMixins = ApplyShim.detectMixin(cssText);\n    let ast = parse(cssText);\n    // only run the applyshim transforms if there is a mixin involved\n    if (hasMixins && this.nativeCss && !this.nativeCssApply) {\n      ApplyShim.transformRules(ast, elementName);\n    }\n    template._styleAst = ast;\n\n    let ownPropertyNames = [];\n    if (!this.nativeCss) {\n      ownPropertyNames = StyleProperties.decorateStyles(template._styleAst, info);\n    }\n    if (!ownPropertyNames.length || this.nativeCss) {\n      let root = this.nativeShadow ? template.content : null;\n      let placeholder = placeholderMap[elementName];\n      let style = this._generateStaticStyle(info, template._styleAst, root, placeholder);\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  _generateStaticStyle(info, rules, shadowroot, placeholder) {\n    let cssText = StyleTransformer.elementStyles(info, rules);\n    if (cssText.length) {\n      return StyleUtil.applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n  }\n  _prepareHost(host) {\n    let is = host.getAttribute('is') || host.localName;\n    let typeExtension;\n    if (is !== host.localName) {\n      typeExtension = host.localName;\n    }\n    let placeholder = placeholderMap[is];\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template._styleAst;\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = template._cssBuild;\n    }\n    return StyleInfo.set(host,\n      new StyleInfo(\n        ast,\n        placeholder,\n        ownStylePropertyNames,\n        is,\n        typeExtension,\n        cssBuild\n      )\n    );\n  }\n  applyStyle(host, overrideProps) {\n    let is = host.getAttribute('is') || host.localName;\n    let styleInfo = StyleInfo.get(host);\n    let hasApplied = Boolean(styleInfo);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (window.CustomStyle) {\n      let CS = window.CustomStyle;\n      if (CS._documentDirty) {\n        CS.findStyles();\n        if (!this.nativeCss) {\n          this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n        } else if (!this.nativeCssApply) {\n          CS._revalidateApplyShim();\n        }\n        CS.applyStyles();\n        // if no elements have booted yet, we can just update the document and be done\n        if (!this._elementsHaveApplied) {\n          return;\n        }\n        // if no native css custom properties, we must recalculate the whole tree\n        if (!this.nativeCss) {\n          this.updateStyles();\n          /*\n          When updateStyles() runs, this element may not have a shadowroot yet.\n          If not, we need to make sure that this element runs `applyStyle` on itself at least once to generate a style\n          */\n          if (hasApplied) {\n            return;\n          }\n        }\n      }\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (this.nativeCss) {\n      if (styleInfo.overrideStyleProperties) {\n        this._updateNativeProperties(host, styleInfo.overrideStyleProperties);\n      }\n      let template = templateMap[is];\n      // bail early if there is no shadowroot for this element\n      if (!template && !this._isRootOwner(host)) {\n        return;\n      }\n      if (template && template._applyShimInvalid && template._style) {\n        // update template\n        if (!template._validating) {\n          ApplyShim.transformRules(template._styleAst, is);\n          template._style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          StyleInfo.startValidating(is);\n        }\n        // update instance if native shadowdom\n        if (this.nativeShadow) {\n          let root = host.shadowRoot;\n          if (root) {\n            let style = root.querySelector('style');\n            style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n        styleInfo.styleRules = template._styleAst;\n      }\n    } else {\n      this._updateProperties(host, styleInfo);\n      if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n        this._applyStyleProperties(host, styleInfo);\n      }\n    }\n    if (hasApplied) {\n      let root = this._isRootOwner(host) ? host : host.shadowRoot;\n      // note: some elements may not have a root!\n      if (root) {\n        this._applyToDescendants(root);\n      }\n    }\n  }\n  _applyToDescendants(root) {\n    // note: fallback to childNodes to support recursing into SVG which\n    // does not support children in some browsers (Edge/IE)\n    let c$ = root.children || root.childNodes;\n    for (let i = 0, c; i < c$.length; i++) {\n      c = c$[i];\n      if (c.shadowRoot) {\n        this.applyStyle(c);\n      }\n      this._applyToDescendants(c);\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = host.getAttribute('is') || host.localName;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!this.nativeShadow) {\n      StyleProperties.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties.hostAndRootPropertiesForScope(host, styleInfo.styleRules);\n    let propertyData = StyleProperties.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  _updateNativeProperties(element, properties) {\n    // remove previous properties\n    for (let p in properties) {\n      // NOTE: for bc with shim, don't apply null values.\n      if (p === null) {\n        element.style.removeProperty(p);\n      } else {\n        element.style.setProperty(p, properties[p]);\n      }\n    }\n  }\n  updateStyles(properties) {\n    this.applyStyle(this._documentOwner, properties);\n  }\n  /* Custom Style operations */\n  _transformCustomStyleForDocument(style) {\n    let ast = StyleUtil.rulesForStyle(style);\n    StyleUtil.forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer.documentRule(rule);\n      }\n      if (this.nativeCss && !this.nativeCssApply) {\n        ApplyShim.transformRule(rule);\n      }\n    });\n    if (this.nativeCss) {\n      style.textContent = StyleUtil.toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules.rules.push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (this.nativeCss && !this.nativeCssApply) {\n      let ast = StyleUtil.rulesForStyle(style);\n      ApplyShim.transformRules(ast);\n      style.textContent = StyleUtil.toCssText(ast);\n    }\n  }\n  _applyCustomStyleToDocument(style) {\n    if (!this.nativeCss) {\n      StyleProperties.applyCustomStyle(style, this._documentOwnerStyleInfo.styleProperties);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!this.nativeCss) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value.trim();\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer.SCOPE_NAME, scopeName);\n    }\n    if (!this.nativeCss) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    StyleUtil.setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n}\n\nwindow['ShadyCSS'] = new ShadyCSS();","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nexport default class StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n","/**\r\n * @license\r\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  if (customElements && customElements.polyfillWrapFlushCallback) {\r\n    // Here we ensure that the public `HTMLImports.whenReady`\r\n    // always comes *after* custom elements have upgraded.\r\n    let flushCallback;\r\n    function runAndClearCallback() {\r\n      if (flushCallback) {\r\n        let cb = flushCallback;\r\n        flushCallback = null;\r\n        cb();\r\n        return true;\r\n      }\r\n    }\r\n    let origWhenReady = HTMLImports.whenReady;\r\n    customElements.polyfillWrapFlushCallback(function(cb) {\r\n      flushCallback = cb;\r\n      origWhenReady(runAndClearCallback);\r\n    });\r\n\r\n    HTMLImports.whenReady = function(cb) {\r\n      origWhenReady(function() {\r\n        // custom element code may add dynamic imports\r\n        // to match processing of native custom elements before\r\n        // domContentLoaded, we wait for these imports to resolve first.\r\n        if (runAndClearCallback()) {\r\n          HTMLImports.whenReady(cb);\r\n        } else {\r\n          cb();\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n})();\r\n","/**\r\n * @license\r\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n(function(scope) {\r\n\r\n  // It's desireable to provide a default stylesheet\r\n  // that's convenient for styling unresolved elements, but\r\n  // it's cumbersome to have to include this manually in every page.\r\n  // It would make sense to put inside some HTMLImport but\r\n  // the HTMLImports polyfill does not allow loading of stylesheets\r\n  // that block rendering. Therefore this injection is tolerated here.\r\n  //\r\n  // NOTE: position: relative fixes IE's failure to inherit opacity\r\n  // when a child is not statically positioned.\r\n  var style = document.createElement('style');\r\n  style.textContent = ''\r\n      + 'body {'\r\n      + 'transition: opacity ease-in 0.2s;'\r\n      + ' } \\n'\r\n      + 'body[unresolved] {'\r\n      + 'opacity: 0; display: block; overflow: hidden; position: relative;'\r\n      + ' } \\n'\r\n      ;\r\n  var head = document.querySelector('head');\r\n  head.insertBefore(style, head.firstChild);\r\n\r\n})(window.WebComponents);\r\n","/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n(function() {\r\n  'use strict';\r\n  HTMLImports.whenReady(function() {\r\n    requestAnimationFrame(function() {\r\n      window.dispatchEvent(new CustomEvent('WebComponentsReady'));\r\n    });\r\n  });\r\n})();\r\n"]}